{"version":3,"file":"a198fdd9-3148cf2d59f0de834fd2.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { _isFirebaseServerApp, _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, updateEmulatorBanner, getDefaultEmulatorHostnameAndPort, deepEqual, createMockUserToken, isCloudWorkstation, pingServer } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.18\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n    SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n    /**\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    constructor(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param key - The key to save the value under\n     * @param value - The value being stored, or null to remove the key.\n     */\n    set(key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n        }\n    }\n    /**\n     * @returns The value that was stored under this key, or null\n     */\n    get(key) {\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return jsonEval(storedVal);\n        }\n    }\n    remove(key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n    prefixedName_(name) {\n        return this.prefix_ + name;\n    }\n    toString() {\n        return this.domStorage_.toString();\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n    constructor() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    set(key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    }\n    get(key) {\n        if (contains(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    }\n    remove(key) {\n        delete this.cache_[key];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            const domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = (function () {\n    let id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n    const utf8Bytes = stringToByteArray(str);\n    const sha1 = new Sha1();\n    sha1.update(utf8Bytes);\n    const sha1Bytes = sha1.digest();\n    return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n    let message = '';\n    for (let i = 0; i < varArgs.length; i++) {\n        const arg = varArgs[i];\n        if (Array.isArray(arg) ||\n            (arg &&\n                typeof arg === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typeof arg.length === 'number')) {\n            message += buildLogMessage_.apply(null, arg);\n        }\n        else if (typeof arg === 'object') {\n            message += stringify(arg);\n        }\n        else {\n            message += arg;\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        logClient.logLevel = LogLevel.VERBOSE;\n        logger = logClient.log.bind(logClient);\n        if (persistent) {\n            SessionStorage.set('logging_enabled', true);\n        }\n    }\n    else if (typeof logger_ === 'function') {\n        logger = logger_;\n    }\n    else {\n        logger = null;\n        SessionStorage.remove('logging_enabled');\n    }\n};\nconst log = function (...varArgs) {\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\n            enableLogging$1(true);\n        }\n    }\n    if (logger) {\n        const message = buildLogMessage_.apply(null, varArgs);\n        logger(message);\n    }\n};\nconst logWrapper = function (prefix) {\n    return function (...varArgs) {\n        log(prefix, ...varArgs);\n    };\n};\nconst error = function (...varArgs) {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n    logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n    logClient.error(message);\n    throw new Error(message);\n};\nconst warn = function (...varArgs) {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n    logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data !== data || // NaN\n            data === Number.POSITIVE_INFINITY ||\n            data === Number.NEGATIVE_INFINITY));\n};\nconst executeWhenDOMReady = function (fn) {\n    if (isNodeSdk() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        let called = false;\n        const wrappedFn = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn, Math.floor(10));\n                return;\n            }\n            if (!called) {\n                called = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn, false);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (document.attachEvent) {\n            // IE.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            document.attachEvent('onreadystatechange', () => {\n                if (document.readyState === 'complete') {\n                    wrappedFn();\n                }\n            });\n            // fallback to onload.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.attachEvent('onload', wrappedFn);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    }\n    else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    }\n    else {\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\nconst requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n    }\n};\nconst ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return stringify(obj);\n    }\n    const keys = [];\n    // eslint-disable-next-line guard-for-in\n    for (const k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    let key = '{';\n    for (let i = 0; i < keys.length; i++) {\n        if (i !== 0) {\n            key += ',';\n        }\n        key += stringify(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n    const len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    const dataSegs = [];\n    for (let c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    const ebits = 11, fbits = 52;\n    const bias = (1 << (ebits - 1)) - 1;\n    let s, e, f, ln, i;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    const str = bits.join('');\n    // Return the data as a hex string. --MJL\n    let hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) {\n            hexByte = '0' + hexByte;\n        }\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a JavaScript Error\n */\nfunction errorForServerCode(code, query) {\n    let reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code === 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code === 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error.code = code.toUpperCase();\n    return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        const intVal = Number(str);\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(() => {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            const stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n    const userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n    const timeout = setTimeout(fn, time);\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n    if (typeof timeout === 'number' &&\n        // @ts-ignore Is only defined in Deno environments.\n        typeof Deno !== 'undefined' &&\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno['unrefTimer']) {\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno.unrefTimer(timeout);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    else if (typeof timeout === 'object' && timeout['unref']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n    constructor(app, appCheckProvider) {\n        this.appCheckProvider = appCheckProvider;\n        this.appName = app.name;\n        if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n            this.serverAppAppCheckToken = app.settings.appCheckToken;\n        }\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\n        if (!this.appCheck) {\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\n        }\n    }\n    getToken(forceRefresh) {\n        if (this.serverAppAppCheckToken) {\n            if (forceRefresh) {\n                throw new Error('Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.');\n            }\n            return Promise.resolve({ token: this.serverAppAppCheckToken });\n        }\n        if (!this.appCheck) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAppCheck. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // AppCheck and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.appCheck) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.appCheck.getToken(forceRefresh);\n    }\n    addTokenChangeListener(listener) {\n        var _a;\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        warn(`Provided AppCheck credentials for the app named \"${this.appName}\" ` +\n            'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n    constructor(appName_, firebaseOptions_, authProvider_) {\n        this.appName_ = appName_;\n        this.firebaseOptions_ = firebaseOptions_;\n        this.authProvider_ = authProvider_;\n        this.auth_ = null;\n        this.auth_ = authProvider_.getImmediate({ optional: true });\n        if (!this.auth_) {\n            authProvider_.onInit(auth => (this.auth_ = auth));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.auth_) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAuth. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // Auth and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.auth_) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.auth_.getToken(forceRefresh).catch(error => {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    }\n    addTokenChangeListener(listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        if (this.auth_) {\n            this.auth_.addAuthTokenListener(listener);\n        }\n        else {\n            this.authProvider_\n                .get()\n                .then(auth => auth.addAuthTokenListener(listener));\n        }\n    }\n    removeTokenChangeListener(listener) {\n        this.authProvider_\n            .get()\n            .then(auth => auth.removeAuthTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.appName_ +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n        return Promise.resolve({\n            accessToken: this.accessToken\n        });\n    }\n    addTokenChangeListener(listener) {\n        // Invoke the listener immediately to match the behavior in Firebase Auth\n        // (see packages/auth/src/auth.js#L1807)\n        listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) { }\n    notifyForInvalidToken() { }\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n    /**\n     * @param host - Hostname portion of the url for the repo\n     * @param secure - Whether or not this repo is accessed over ssl\n     * @param namespace - The namespace represented by the repo\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n     * @param persistenceKey - Override the default session persistence storage key\n     */\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false, emulatorOptions = null) {\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.nodeAdmin = nodeAdmin;\n        this.persistenceKey = persistenceKey;\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n        this.isUsingEmulator = isUsingEmulator;\n        this.emulatorOptions = emulatorOptions;\n        this._host = host.toLowerCase();\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\n        this.internalHost =\n            PersistentStorage.get('host:' + host) || this._host;\n    }\n    isCacheableHost() {\n        return this.internalHost.substr(0, 2) === 's-';\n    }\n    isCustomHost() {\n        return (this._domain !== 'firebaseio.com' &&\n            this._domain !== 'firebaseio-demo.com');\n    }\n    get host() {\n        return this._host;\n    }\n    set host(newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this._host, this.internalHost);\n            }\n        }\n    }\n    toString() {\n        let str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    }\n    toURLString() {\n        const protocol = this.secure ? 'https://' : 'http://';\n        const query = this.includeNamespaceInQueryParams\n            ? `?ns=${this.namespace}`\n            : '';\n        return `${protocol}${this.host}/${query}`;\n    }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n    return (repoInfo.host !== repoInfo.internalHost ||\n        repoInfo.isCustomHost() ||\n        repoInfo.includeNamespaceInQueryParams);\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n    let connURL;\n    if (type === WEBSOCKET) {\n        connURL =\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n    }\n    else if (type === LONG_POLLING) {\n        connURL =\n            (repoInfo.secure ? 'https://' : 'http://') +\n                repoInfo.internalHost +\n                '/.lp?';\n    }\n    else {\n        throw new Error('Unknown connection type: ' + type);\n    }\n    if (repoInfoNeedsQueryParam(repoInfo)) {\n        params['ns'] = repoInfo.namespace;\n    }\n    const pairs = [];\n    each(params, (key, value) => {\n        pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n    constructor() {\n        this.counters_ = {};\n    }\n    incrementCounter(name, amount = 1) {\n        if (!contains(this.counters_, name)) {\n            this.counters_[name] = 0;\n        }\n        this.counters_[name] += amount;\n    }\n    get() {\n        return deepCopy(this.counters_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n    const hashString = repoInfo.toString();\n    if (!collections[hashString]) {\n        collections[hashString] = new StatsCollection();\n    }\n    return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n    const hashString = repoInfo.toString();\n    if (!reporters[hashString]) {\n        reporters[hashString] = creatorFunction();\n    }\n    return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n    /**\n     * @param onMessage_\n     */\n    constructor(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    closeAfter(responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    }\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     */\n    handleResponse(requestNum, data) {\n        this.pendingResponses[requestNum] = data;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            const toProcess = this.pendingResponses[this.currentResponseNum];\n            delete this.pendingResponses[this.currentResponseNum];\n            for (let i = 0; i < toProcess.length; ++i) {\n                if (toProcess[i]) {\n                    exceptionGuard(() => {\n                        this.onMessage_(toProcess[i]);\n                    });\n                }\n            }\n            if (this.currentResponseNum === this.closeAfterResponse) {\n                if (this.onClose) {\n                    this.onClose();\n                    this.onClose = null;\n                }\n                break;\n            }\n            this.currentResponseNum++;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n    /**\n     * @param connId An identifier for this connection, used for logging\n     * @param repoInfo The info for the endpoint to send data to.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The AppCheck token for this client.\n     * @param authToken The AuthToken to use for this connection.\n     * @param transportSessionId Optional transportSessionid if we are\n     * reconnecting for an existing transport session\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n     * already created a connection previously\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = logWrapper(connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.urlFn = (params) => {\n            // Always add the token if we have one.\n            if (this.appCheckToken) {\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n        };\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(() => {\n            this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            this.onClosed_();\n            this.connectTimeoutTimer_ = null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        executeWhenDOMReady(() => {\n            if (this.isClosed_) {\n                return;\n            }\n            //Set up a callback that gets triggered once a connection is set up.\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n                const [command, arg1, arg2, arg3, arg4] = args;\n                this.incrementIncomingBytes_(args);\n                if (!this.scriptTagHolder) {\n                    return; // we closed the connection.\n                }\n                if (this.connectTimeoutTimer_) {\n                    clearTimeout(this.connectTimeoutTimer_);\n                    this.connectTimeoutTimer_ = null;\n                }\n                this.everConnected_ = true;\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\n                    this.id = arg1;\n                    this.password = arg2;\n                }\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        this.myPacketOrderer.closeAfter(arg1, () => {\n                            this.onClosed_();\n                        });\n                    }\n                    else {\n                        this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, (...args) => {\n                const [pN, data] = args;\n                this.incrementIncomingBytes_(args);\n                this.myPacketOrderer.handleResponse(pN, data);\n            }, () => {\n                this.onClosed_();\n            }, this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\n            }\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n            if (this.transportSessionId) {\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n            }\n            if (this.lastSessionId) {\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n            }\n            if (this.applicationId) {\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n            }\n            if (this.appCheckToken) {\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            if (typeof location !== 'undefined' &&\n                location.hostname &&\n                FORGE_DOMAIN_RE.test(location.hostname)) {\n                urlParams[REFERER_PARAM] = FORGE_REF;\n            }\n            const connectURL = this.urlFn(urlParams);\n            this.log_('Connecting via long-poll to ' + connectURL);\n            this.scriptTagHolder.addTag(connectURL, () => {\n                /* do nothing */\n            });\n        });\n    }\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    start() {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    static forceAllow() {\n        BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    static forceDisallow() {\n        BrowserPollConnection.forceDisallow_ = true;\n    }\n    // Static method, use string literal so it can be accessed in a generic way\n    static isAvailable() {\n        if (isNodeSdk()) {\n            return false;\n        }\n        else if (BrowserPollConnection.forceAllow_) {\n            return true;\n        }\n        else {\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n            return (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !isChromeExtensionContentScript() &&\n                !isWindowsStoreApp());\n        }\n    }\n    /**\n     * No-op for polling\n     */\n    markConnectionHealthy() { }\n    /**\n     * Stops polling and cleans up the iframe\n     */\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    }\n    /**\n     * Triggered when this transport is closed\n     */\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param data - The JSON data to transmit.\n     */\n    send(data) {\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        const base64data = base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    }\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     */\n    addDisconnectPingFrame(id, pw) {\n        if (isNodeSdk()) {\n            return;\n        }\n        this.myDisconnFrame = document.createElement('iframe');\n        const urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\n     * Used to track the bytes received by this client\n     */\n    incrementIncomingBytes_(args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        const bytesReceived = stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n    /**\n     * @param commandCB - The callback to be called when control commands are received from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        this.outstandingRequests = new Set();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = LUIDGenerator();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n                onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            let script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                const currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            const iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                log('frame writing exception');\n                if (e.stack) {\n                    log(e.stack);\n                }\n                log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     */\n    static createIFrame_() {\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                const a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                const domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (iframe.document) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    }\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    close() {\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n            this.myIFrame.doc.body.textContent = '';\n            setTimeout(() => {\n                if (this.myIFrame !== null) {\n                    document.body.removeChild(this.myIFrame);\n                    this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        // Protect from being called recursively.\n        const onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    }\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param id - The ID of this connection\n     * @param pw - The password for this connection\n     */\n    startLongPoll(id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    }\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    newRequest_() {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            let theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            let curDataString = '';\n            let i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                const nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length +\n                    SEG_HEADER_SIZE +\n                    curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    const theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    enqueueSegment(segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    }\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param url - The URL of the script tag.\n     * @param serial - The serial number of the request.\n     */\n    addLongPollTag_(url, serial) {\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial);\n        const doNewRequest = () => {\n            this.outstandingRequests.delete(serial);\n            this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        const readyStateCB = () => {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    }\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param url - The URL for the script tag source.\n     * @param loadCB - A callback to be triggered once the script has loaded.\n     */\n    addTag(url, loadCB) {\n        if (isNodeSdk()) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(() => {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!this.sendNewPolls) {\n                        return;\n                    }\n                    const newScript = this.myIFrame.doc.createElement('script');\n                    newScript.type = 'text/javascript';\n                    newScript.async = true;\n                    newScript.src = url;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    newScript.onload = newScript.onreadystatechange =\n                        function () {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            const rstate = newScript.readyState;\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                newScript.onload = newScript.onreadystatechange = null;\n                                if (newScript.parentNode) {\n                                    newScript.parentNode.removeChild(newScript);\n                                }\n                                loadCB();\n                            }\n                        };\n                    newScript.onerror = () => {\n                        log('Long-poll script failed to load: ' + url);\n                        this.sendNewPolls = false;\n                        this.close();\n                    };\n                    this.myIFrame.doc.body.appendChild(newScript);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n    /**\n     * @param connId identifier for this transport\n     * @param repoInfo The info for the websocket endpoint.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The App Check Token for this client.\n     * @param authToken The Auth Token for this client.\n     * @param transportSessionId Optional transportSessionId if this is connecting\n     * to an existing transport session\n     * @param lastSessionId Optional lastSessionId if there was a previous\n     * connection\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = logWrapper(this.connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n        this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\n     * @param repoInfo - The info for the websocket endpoint.\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\n     * @returns connection url\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n        const urlParams = {};\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n        if (!isNodeSdk() &&\n            typeof location !== 'undefined' &&\n            location.hostname &&\n            FORGE_DOMAIN_RE.test(location.hostname)) {\n            urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\n        }\n        if (appCheckToken) {\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n        }\n        if (applicationId) {\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\n        }\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            let options;\n            if (isNodeSdk()) {\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                options = {\n                    headers: {\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n                        'X-Firebase-GMPID': this.applicationId || ''\n                    }\n                };\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\n                // Note that we send the credentials here even if they aren't admin credentials, which is\n                // not a problem.\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\n                // through the websocket connection once it is established.\n                if (this.authToken) {\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\n                }\n                if (this.appCheckToken) {\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n                }\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                const env = process['env'];\n                const proxy = this.connURL.indexOf('wss://') === 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n            }\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = () => {\n            this.log_('Websocket connected.');\n            this.everConnected_ = true;\n        };\n        this.mySock.onclose = () => {\n            this.log_('Websocket connection was disconnected.');\n            this.mySock = null;\n            this.onClosed_();\n        };\n        this.mySock.onmessage = m => {\n            this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = e => {\n            this.log_('WebSocket error.  Closing connection.');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n        };\n    }\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    start() { }\n    static forceDisallow() {\n        WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n        let isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    }\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     */\n    static previouslyFailed() {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (PersistentStorage.isInMemoryStorage ||\n            PersistentStorage.get('previous_websocket_failure') === true);\n    }\n    markConnectionHealthy() {\n        PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n        this.frames.push(data);\n        if (this.frames.length === this.totalFrames) {\n            const fullMess = this.frames.join('');\n            this.frames = null;\n            const jsonMess = jsonEval(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    }\n    /**\n     * @param frameCount - The number of frames we are expecting from the server\n     */\n    handleNewFrameCount_(frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    }\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @returns Any remaining data to be process, or null if there is none\n     */\n    extractFrameCount_(data) {\n        assert(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            const frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    }\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess - The frame data\n     */\n    handleIncomingFrame(mess) {\n        if (this.mySock === null) {\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        }\n        const data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            const remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    }\n    /**\n     * Send a message to the server\n     * @param data - The JSON object to transmit\n     */\n    send(data) {\n        this.resetKeepAlive();\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    }\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    }\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    resetKeepAlive() {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(() => {\n            //If there has been no websocket activity for a while, send a no-op\n            if (this.mySock) {\n                this.sendString_('0');\n            }\n            this.resetKeepAlive();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\n     * Send a string over the websocket.\n     *\n     * @param str - String to send.\n     */\n    sendString_(str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n    static get ALL_TRANSPORTS() {\n        return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n     * TransportManager has already set up transports_\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n        return this.globalTransportInitialized_;\n    }\n    /**\n     * @param repoInfo - Metadata around the namespace we're connecting to\n     */\n    constructor(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    initTransports_(repoInfo) {\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) {\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            }\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            const transports = (this.transports_ = []);\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\n                if (transport && transport['isAvailable']()) {\n                    transports.push(transport);\n                }\n            }\n            TransportManager.globalTransportInitialized_ = true;\n        }\n    }\n    /**\n     * @returns The constructor for the initial transport to use\n     */\n    initialTransport() {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    }\n    /**\n     * @returns The constructor for the next transport, or null\n     */\n    upgradeTransport() {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n    /**\n     * @param id - an id for this connection\n     * @param repoInfo_ - the info for the endpoint to connect to\n     * @param applicationId_ - the Firebase App ID for this project\n     * @param appCheckToken_ - The App Check Token for this device.\n     * @param authToken_ - The auth token for this session.\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.appCheckToken_ = appCheckToken_;\n        this.authToken_ = authToken_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\n        this.log_ = logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     */\n    start_() {\n        const conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessageReceived = this.connReceiver_(this.conn_);\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(() => {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n        if (healthyTimeoutMS > 0) {\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n                this.healthyTimeout_ = null;\n                if (!this.isHealthy_) {\n                    if (this.conn_ &&\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has received ' +\n                            this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        this.isHealthy_ = true;\n                        this.conn_.markConnectionHealthy();\n                    }\n                    else if (this.conn_ &&\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\n                            this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        this.log_('Closing unhealthy connection after timeout.');\n                        this.close();\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }, Math.floor(healthyTimeoutMS));\n        }\n    }\n    nextTransportId_() {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n    disconnReceiver_(conn) {\n        return everConnected => {\n            if (conn === this.conn_) {\n                this.onConnectionLost_(everConnected);\n            }\n            else if (conn === this.secondaryConn_) {\n                this.log_('Secondary connection lost.');\n                this.onSecondaryConnectionLost_();\n            }\n            else {\n                this.log_('closing an old connection');\n            }\n        };\n    }\n    connReceiver_(conn) {\n        return (message) => {\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n                if (conn === this.rx_) {\n                    this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === this.secondaryConn_) {\n                    this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    this.log_('message on old connection');\n                }\n            }\n        };\n    }\n    /**\n     * @param dataMsg - An arbitrary data message to be sent to the server\n     */\n    sendRequest(dataMsg) {\n        // wrap in a data message envelope and send it on\n        const msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    }\n    tryCleanupConnection() {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    }\n    onSecondaryControl_(controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            const cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    }\n    onSecondaryMessageReceived_(parsedData) {\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer === 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    }\n    upgradeIfSecondaryHealthy_() {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    proceedWithUpgrade_() {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    }\n    onPrimaryMessageReceived_(parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onControl_(data);\n        }\n        else if (layer === 'd') {\n            this.onDataMessage_(data);\n        }\n    }\n    onDataMessage_(message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    }\n    onPrimaryResponse_() {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    }\n    onControl_(controlData) {\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            const payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                const handshakePayload = Object.assign({}, payload);\n                if (this.repoInfo_.isUsingEmulator) {\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n                    handshakePayload.h = this.repoInfo_.host;\n                }\n                this.onHandshake_(handshakePayload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                error('Unknown control packet command: ' + cmd);\n            }\n        }\n    }\n    /**\n     * @param handshake - The handshake data returned from the server\n     */\n    onHandshake_(handshake) {\n        const timestamp = handshake.ts;\n        const version = handshake.v;\n        const host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.host = host;\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (PROTOCOL_VERSION !== version) {\n                warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    }\n    tryStartUpgrade_() {\n        const conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    }\n    startUpgrade_(conn) {\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessage = this.connReceiver_(this.secondaryConn_);\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        setTimeoutNonBlocking(() => {\n            if (this.secondaryConn_) {\n                this.log_('Timed out trying to upgrade.');\n                this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    }\n    onReset_(host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.host = host;\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    }\n    onConnectionEstablished_(conn, timestamp) {\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            setTimeoutNonBlocking(() => {\n                this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    }\n    sendPingOnPrimaryIfNecessary_() {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    onSecondaryConnectionLost_() {\n        const conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    }\n    /**\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     */\n    onConnectionLost_(everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    }\n    onConnectionShutdown_(reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    }\n    sendData_(data) {\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    }\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    close() {\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    closeConnections_() {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n    put(pathString, data, onComplete, hash) { }\n    merge(pathString, data, onComplete, hash) { }\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param token - The authentication token\n     */\n    refreshAuthToken(token) { }\n    /**\n     * Refreshes the app check token for the current connection.\n     * @param token The app check token\n     */\n    refreshAppCheckToken(token) { }\n    onDisconnectPut(pathString, data, onComplete) { }\n    onDisconnectMerge(pathString, data, onComplete) { }\n    onDisconnectCancel(pathString, onComplete) { }\n    reportStats(stats) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n    constructor(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     */\n    trigger(eventType, ...varArgs) {\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            const listeners = [...this.listeners_[eventType]];\n            for (let i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, varArgs);\n            }\n        }\n    }\n    on(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback, context });\n        const eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    }\n    off(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        const listeners = this.listeners_[eventType] || [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    }\n    validateEventType_(eventType) {\n        assert(this.allowedEvents_.find(et => {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n    static getInstance() {\n        return new OnlineMonitor();\n    }\n    constructor() {\n        super(['online']);\n        this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !isMobileCordova()) {\n            window.addEventListener('online', () => {\n                if (!this.online_) {\n                    this.online_ = true;\n                    this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', () => {\n                if (this.online_) {\n                    this.online_ = false;\n                    this.trigger('online', false);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    }\n    currentlyOnline() {\n        return this.online_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n    /**\n     * @param pathOrString - Path string to parse, or another path, or the raw\n     * tokens array\n     */\n    constructor(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            let copyTo = 0;\n            for (let i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    toString() {\n        let pathString = '';\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') {\n                pathString += '/' + this.pieces_[i];\n            }\n        }\n        return pathString || '/';\n    }\n}\nfunction newEmptyPath() {\n    return new Path('');\n}\nfunction pathGetFront(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n    return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n    let pieceNum = path.pieceNum_;\n    if (pieceNum < path.pieces_.length) {\n        pieceNum++;\n    }\n    return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n    if (path.pieceNum_ < path.pieces_.length) {\n        return path.pieces_[path.pieces_.length - 1];\n    }\n    return null;\n}\nfunction pathToUrlEncodedString(path) {\n    let pathString = '';\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        if (path.pieces_[i] !== '') {\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n        }\n    }\n    return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n    return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n            pieces.push(childPathObj.pieces_[i]);\n        }\n    }\n    else {\n        const childPieces = childPathObj.split('/');\n        for (let i = 0; i < childPieces.length; i++) {\n            if (childPieces[i].length > 0) {\n                pieces.push(childPieces[i]);\n            }\n        }\n    }\n    return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n    return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\n    if (outer === null) {\n        return innerPath;\n    }\n    else if (outer === inner) {\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n    }\n    else {\n        throw new Error('INTERNAL ERROR: innerPath (' +\n            innerPath +\n            ') is not within ' +\n            'outerPath (' +\n            outerPath +\n            ')');\n    }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n    const leftKeys = pathSlice(left, 0);\n    const rightKeys = pathSlice(right, 0);\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (leftKeys.length === rightKeys.length) {\n        return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n    if (pathGetLength(path) !== pathGetLength(other)) {\n        return false;\n    }\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n    let i = path.pieceNum_;\n    let j = other.pieceNum_;\n    if (pathGetLength(path) > pathGetLength(other)) {\n        return false;\n    }\n    while (i < path.pieces_.length) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n        ++i;\n        ++j;\n    }\n    return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n    /**\n     * @param path - Initial Path.\n     * @param errorPrefix_ - Prefix for any error messages.\n     */\n    constructor(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        this.parts_ = pathSlice(path, 0);\n        /** Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (let i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += stringLength(this.parts_[i]);\n        }\n        validationPathCheckValid(this);\n    }\n}\nfunction validationPathPush(validationPath, child) {\n    // Count the needed '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ += 1;\n    }\n    validationPath.parts_.push(child);\n    validationPath.byteLength_ += stringLength(child);\n    validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n    const last = validationPath.parts_.pop();\n    validationPath.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ -= 1;\n    }\n}\nfunction validationPathCheckValid(validationPath) {\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n        throw new Error(validationPath.errorPrefix_ +\n            'has a key path longer than ' +\n            MAX_PATH_LENGTH_BYTES +\n            ' bytes (' +\n            validationPath.byteLength_ +\n            ').');\n    }\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n        throw new Error(validationPath.errorPrefix_ +\n            'path specified exceeds the maximum depth that can be written (' +\n            MAX_PATH_DEPTH +\n            ') or object contains a cycle ' +\n            validationPathToErrorString(validationPath));\n    }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n    if (validationPath.parts_.length === 0) {\n        return '';\n    }\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n    static getInstance() {\n        return new VisibilityMonitor();\n    }\n    constructor() {\n        super(['visible']);\n        let hidden;\n        let visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, () => {\n                const visible = !document[hidden];\n                if (visible !== this.visible_) {\n                    this.visible_ = visible;\n                    this.trigger('visible', visible);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param applicationId_ - The Firebase App ID for this project\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.onConnectStatus_ = onConnectStatus_;\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\n        this.log_ = logWrapper('p:' + this.id + ':');\n        this.interruptReasons_ = {};\n        this.listens = new Map();\n        this.outstandingPuts_ = [];\n        this.outstandingGets_ = [];\n        this.outstandingPutCount_ = 0;\n        this.outstandingGetCount_ = 0;\n        this.onDisconnectRequestQueue_ = [];\n        this.connected_ = false;\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        this.securityDebugCallback_ = null;\n        this.lastSessionId = null;\n        this.establishConnectionTimer_ = null;\n        this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        this.requestCBHash_ = {};\n        this.requestNumber_ = 0;\n        this.realtime_ = null;\n        this.authToken_ = null;\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = false;\n        this.invalidAuthTokenCount_ = 0;\n        this.invalidAppCheckTokenCount_ = 0;\n        this.firstConnection_ = true;\n        this.lastConnectionAttemptTime_ = null;\n        this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !isNodeSdk()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n        }\n    }\n    sendRequest(action, body, onResponse) {\n        const curReqNum = ++this.requestNumber_;\n        const msg = { r: curReqNum, a: action, b: body };\n        this.log_(stringify(msg));\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    }\n    get(query) {\n        this.initConnection_();\n        const deferred = new Deferred();\n        const request = {\n            p: query._path.toString(),\n            q: query._queryObject\n        };\n        const outstandingGet = {\n            action: 'g',\n            request,\n            onComplete: (message) => {\n                const payload = message['d'];\n                if (message['s'] === 'ok') {\n                    deferred.resolve(payload);\n                }\n                else {\n                    deferred.reject(payload);\n                }\n            }\n        };\n        this.outstandingGets_.push(outstandingGet);\n        this.outstandingGetCount_++;\n        const index = this.outstandingGets_.length - 1;\n        if (this.connected_) {\n            this.sendGet_(index);\n        }\n        return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n        this.initConnection_();\n        const queryId = query._queryIdentifier;\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        if (!this.listens.has(pathString)) {\n            this.listens.set(pathString, new Map());\n        }\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n        const listenSpec = {\n            onComplete,\n            hashFn: currentHashFn,\n            query,\n            tag\n        };\n        this.listens.get(pathString).set(queryId, listenSpec);\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    }\n    sendGet_(index) {\n        const get = this.outstandingGets_[index];\n        this.sendRequest('g', get.request, (message) => {\n            delete this.outstandingGets_[index];\n            this.outstandingGetCount_--;\n            if (this.outstandingGetCount_ === 0) {\n                this.outstandingGets_ = [];\n            }\n            if (get.onComplete) {\n                get.onComplete(message);\n            }\n        });\n    }\n    sendListen_(listenSpec) {\n        const query = listenSpec.query;\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query._queryObject;\n            req['t'] = listenSpec.tag;\n        }\n        req[ /*hash*/'h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, (message) => {\n            const payload = message[ /*data*/'d'];\n            const status = message[ /*status*/'s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            const currentListenSpec = this.listens.get(pathString) &&\n                this.listens.get(pathString).get(queryId);\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                this.log_('listen response', message);\n                if (status !== 'ok') {\n                    this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    }\n    static warnOnListenWarnings_(payload, query) {\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnings = safeGet(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n                const indexPath = query._path.toString();\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\n                    `${indexPath} to your security rules for better performance.`);\n            }\n        }\n    }\n    refreshAuthToken(token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, () => { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        const isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    }\n    refreshAppCheckToken(token) {\n        this.appCheckToken_ = token;\n        this.log_('App check token refreshed');\n        if (this.appCheckToken_) {\n            this.tryAppCheck();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us.\n            //If we're not connected, simply delete the credential so we dont become\n            // authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unappeck', {}, () => { });\n            }\n        }\n    }\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    tryAuth() {\n        if (this.connected_ && this.authToken_) {\n            const token = this.authToken_;\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n            const requestData = { cred: token };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (this.authToken_ === token) {\n                    if (status === 'ok') {\n                        this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Attempts to authenticate with the given token. If the authentication\n     * attempt fails, it's triggered like the token was revoked (the connection is\n     * closed).\n     */\n    tryAppCheck() {\n        if (this.connected_ && this.appCheckToken_) {\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (status === 'ok') {\n                    this.invalidAppCheckTokenCount_ = 0;\n                }\n                else {\n                    this.onAppCheckRevoked_(status, data);\n                }\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    unlisten(query, tag) {\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n        }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'o',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'om',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'oc',\n                data: null,\n                onComplete\n            });\n        }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, (response) => {\n            if (onComplete) {\n                setTimeout(() => {\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\n                }, Math.floor(0));\n            }\n        });\n    }\n    put(pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n        this.initConnection_();\n        const request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined) {\n            request[ /*hash*/'h'] = hash;\n        }\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action,\n            request,\n            onComplete\n        });\n        this.outstandingPutCount_++;\n        const index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    }\n    sendPut_(index) {\n        const action = this.outstandingPuts_[index].action;\n        const request = this.outstandingPuts_[index].request;\n        const onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, (message) => {\n            this.log_(action + ' response', message);\n            delete this.outstandingPuts_[index];\n            this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (this.outstandingPutCount_ === 0) {\n                this.outstandingPuts_ = [];\n            }\n            if (onComplete) {\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\n            }\n        });\n    }\n    reportStats(stats) {\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            const request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, result => {\n                const status = result[ /*status*/'s'];\n                if (status !== 'ok') {\n                    const errorReason = result[ /* data */'d'];\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    }\n    onDataMessage_(message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + stringify(message));\n            const reqNum = message['r'];\n            const onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message[ /*body*/'b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    }\n    onDataPush_(action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge*/ false, body['t']);\n        }\n        else if (action === 'm') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge=*/ true, body['t']);\n        }\n        else if (action === 'c') {\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\n        }\n        else if (action === 'ac') {\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'apc') {\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'sd') {\n            this.onSecurityDebugPacket_(body);\n        }\n        else {\n            error('Unrecognized action received from server: ' +\n                stringify(action) +\n                '\\nAre you using the latest client?');\n        }\n    }\n    onReady_(timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(() => {\n            this.establishConnectionTimer_ = null;\n            this.establishConnection_();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(timeout));\n    }\n    initConnection_() {\n        if (!this.realtime_ && this.firstConnection_) {\n            this.scheduleConnect_(0);\n        }\n    }\n    onVisible_(visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    }\n    onOnline_(online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    }\n    onRealtimeDisconnect_() {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                }\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            const timeSinceLastConnectAttempt = Math.max(0, new Date().getTime() - this.lastConnectionAttemptTime_);\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            const onDataMessage = this.onDataMessage_.bind(this);\n            const onReady = this.onReady_.bind(this);\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            const lastSessionId = this.lastSessionId;\n            let canceled = false;\n            let connection = null;\n            const closeFn = function () {\n                if (connection) {\n                    connection.close();\n                }\n                else {\n                    canceled = true;\n                    onDisconnect();\n                }\n            };\n            const sendRequestFn = function (msg) {\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\n                connection.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn,\n                sendRequest: sendRequestFn\n            };\n            const forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            try {\n                // First fetch auth and app check token, and establish connection after\n                // fetching the token was successful\n                const [authToken, appCheckToken] = await Promise.all([\n                    this.authTokenProvider_.getToken(forceRefresh),\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\n                ]);\n                if (!canceled) {\n                    log('getToken() completed. Creating connection.');\n                    this.authToken_ = authToken && authToken.accessToken;\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \n                    /* onKill= */ reason => {\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId);\n                }\n                else {\n                    log('getToken() completed but was canceled');\n                }\n            }\n            catch (error) {\n                this.log_('Failed to get token: ' + error);\n                if (!canceled) {\n                    if (this.repoInfo_.nodeAdmin) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        warn(error);\n                    }\n                    closeFn();\n                }\n            }\n        }\n    }\n    interrupt(reason) {\n        log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    }\n    resume(reason) {\n        log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (isEmpty(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    }\n    handleTimestamp_(timestamp) {\n        const delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    }\n    cancelSentTransactions_() {\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            const put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete) {\n                    put.onComplete('disconnect');\n                }\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n            this.outstandingPuts_ = [];\n        }\n    }\n    onListenRevoked_(pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        let queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n        }\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) {\n            listen.onComplete('permission_denied');\n        }\n    }\n    removeListen_(pathString, queryId) {\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\n        let listen;\n        if (this.listens.has(normalizedPathString)) {\n            const map = this.listens.get(normalizedPathString);\n            listen = map.get(queryId);\n            map.delete(queryId);\n            if (map.size === 0) {\n                this.listens.delete(normalizedPathString);\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n        log('App check token revoked: ' + statusCode + '/' + explanation);\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = true;\n        // Note: We don't close the connection as the developer may not have\n        // enforcement enabled. The backend closes connections with enforcements.\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAppCheckTokenCount_++;\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                this.appCheckTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onSecurityDebugPacket_(body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body) {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    }\n    restoreState_() {\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        this.tryAppCheck();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        for (const queries of this.listens.values()) {\n            for (const listenSpec of queries.values()) {\n                this.sendListen_(listenSpec);\n            }\n        }\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) {\n                this.sendPut_(i);\n            }\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            const request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\n            if (this.outstandingGets_[i]) {\n                this.sendGet_(i);\n            }\n        }\n    }\n    /**\n     * Sends client stats for first connection\n     */\n    sendConnectStats_() {\n        const stats = {};\n        let clientName = 'js';\n        if (isNodeSdk()) {\n            if (this.repoInfo_.nodeAdmin) {\n                clientName = 'admin_node';\n            }\n            else {\n                clientName = 'node';\n            }\n        }\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (isMobileCordova()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if (isReactNative()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    }\n    shouldReconnect_() {\n        const online = OnlineMonitor.getInstance().currentlyOnline();\n        return isEmpty(this.interruptReasons_) && online;\n    }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n    constructor(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    static Wrap(name, node) {\n        return new NamedNode(name, node);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n    /**\n     * @returns A standalone comparison function for\n     * this index\n     */\n    getCompare() {\n        return this.compare.bind(this);\n    }\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     *\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    indexedValueChanged(oldNode, newNode) {\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\n     * @returns a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n    static get __EMPTY_NODE() {\n        return __EMPTY_NODE;\n    }\n    static set __EMPTY_NODE(val) {\n        __EMPTY_NODE = val;\n    }\n    compare(a, b) {\n        return nameCompare(a.name, b.name);\n    }\n    isDefinedOn(node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return false; // The key for a node never changes.\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n    makePost(indexValue, name) {\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.key';\n    }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n    /**\n     * @param node - Node to iterate.\n     * @param isReverse_ - Whether or not to iterate in reverse\n     */\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        this.nodeStack_ = [];\n        let cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) {\n                cmp *= -1;\n            }\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    getNext() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        let node = this.nodeStack_.pop();\n        let result;\n        if (this.resultGenerator_) {\n            result = this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            result = { key: node.key, value: node.value };\n        }\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    }\n    hasNext() {\n        return this.nodeStack_.length > 0;\n    }\n    peek() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n    /**\n     * @param key - Key associated with this node.\n     * @param value - Value associated with this node.\n     * @param color - Whether this node is red.\n     * @param left - Left child.\n     * @param right - Right child.\n     */\n    constructor(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param key - New key for the node, or null.\n     * @param value - New value for the node, or null.\n     * @param color - New color for the node, or null.\n     * @param left - New left child for the node, or null.\n     * @param right - New right child for the node, or null.\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return this.left.count() + 1 + this.right.count();\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return (this.left.inorderTraversal(action) ||\n            !!action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    }\n    /**\n     * @returns The minimum node in the tree.\n     */\n    min_() {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    minKey() {\n        return this.min_().key;\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    maxKey() {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    }\n    /**\n     * @param key - Key to insert.\n     * @param value - Value to insert.\n     * @param comparator - Comparator.\n     * @returns New tree, with the key/value added.\n     */\n    insert(key, value, comparator) {\n        let n = this;\n        const cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns New tree, with the minimum key removed.\n     */\n    removeMin_() {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        let n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\n            n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    }\n    /**\n     * @param key - The key of the item to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with the specified item removed.\n     */\n    remove(key, comparator) {\n        let n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_()) {\n                n = n.rotateRight_();\n            }\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns Whether this is a RED node.\n     */\n    isRed_() {\n        return this.color;\n    }\n    /**\n     * @returns New tree after performing any needed rotations.\n     */\n    fixUp_() {\n        let n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) {\n            n = n.rotateLeft_();\n        }\n        if (n.left.isRed_() && n.left.left.isRed_()) {\n            n = n.rotateRight_();\n        }\n        if (n.left.isRed_() && n.right.isRed_()) {\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedLeft.\n     */\n    moveRedLeft_() {\n        let n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedRight.\n     */\n    moveRedRight_() {\n        let n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after rotateLeft.\n     */\n    rotateLeft_() {\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\n     * @returns New tree, after rotateRight.\n     */\n    rotateRight_() {\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\n     * @returns Newt ree, after colorFlip.\n     */\n    colorFlip_() {\n        const left = this.left.copy(null, null, !this.left.color, null, null);\n        const right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    }\n    /**\n     * For testing.\n     *\n     * @returns True if all is well.\n     */\n    checkMaxDepth_() {\n        const blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        const blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n    /**\n     * Returns a copy of the current node.\n     *\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return this;\n    }\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @param comparator - Comparator.\n     * @returns New tree, with item added.\n     */\n    insert(key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    }\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with item removed.\n     */\n    remove(key, comparator) {\n        return this;\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return 0;\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return true;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    inorderTraversal(action) {\n        return false;\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return false;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    check_() {\n        return 0;\n    }\n    /**\n     * @returns Whether this node is red.\n     */\n    isRed_() {\n        return false;\n    }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n    /**\n     * @param comparator_ - Key comparator.\n     * @param root_ - Optional root node for the map.\n     */\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @returns New map, with item added.\n     */\n    insert(key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @returns New map, with item removed.\n     */\n    remove(key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param key - The key to look up.\n     * @returns The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    get(key) {\n        let cmp;\n        let node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param key - The key to find the predecessor of\n     * @returns The predecessor key.\n     */\n    getPredecessorKey(key) {\n        let cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\n     * @returns True if the map is empty.\n     */\n    isEmpty() {\n        return this.root_.isEmpty();\n    }\n    /**\n     * @returns The total number of nodes in the map.\n     */\n    count() {\n        return this.root_.count();\n    }\n    /**\n     * @returns The minimum key in the map.\n     */\n    minKey() {\n        return this.root_.minKey();\n    }\n    /**\n     * @returns The maximum key in the map.\n     */\n    maxKey() {\n        return this.root_.maxKey();\n    }\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return this.root_.inorderTraversal(action);\n    }\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns True if the traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return this.root_.reverseTraversal(action);\n    }\n    /**\n     * Returns an iterator over the SortedMap.\n     * @returns The iterator.\n     */\n    getIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n    getIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n    getReverseIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n    getReverseIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n    MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n    if (typeof priority === 'number') {\n        return 'number:' + doubleToIEEE754String(priority);\n    }\n    else {\n        return 'string:' + priority;\n    }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        const val = priorityNode.val();\n        assert(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n    static set __childrenNodeConstructor(val) {\n        __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n        return __childrenNodeConstructor;\n    }\n    /**\n     * @param value_ - The value to store in this leaf node. The object type is\n     * possible in the event of a deferred value\n     * @param priorityNode_ - The priority of this node.\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        if (pathIsEmpty(path)) {\n            return this;\n        }\n        else if (pathGetFront(path) === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    hasChild() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n        return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n        return false;\n    }\n    val(exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        }\n        else {\n            return this.getValue();\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.priorityNode_.isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            }\n            const type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /**\n     * Returns the value of the leaf node.\n     * @returns The value of the node.\n     */\n    getValue() {\n        return this.value_;\n    }\n    compareTo(other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    }\n    /**\n     * Comparison specifically for two leaf nodes\n     */\n    compareToLeafNode_(otherLeaf) {\n        const otherLeafType = typeof otherLeaf.value_;\n        const thisLeafType = typeof this.value_;\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    }\n    withIndex() {\n        return this;\n    }\n    isIndexed() {\n        return true;\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            const otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n    MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n    compare(a, b) {\n        const aPriority = a.node.getPriority();\n        const bPriority = b.node.getPriority();\n        const indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return !node.getPriority().isEmpty();\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n    makePost(indexValue, name) {\n        const priorityNode = nodeFromJSON$1(indexValue);\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.priority';\n    }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n    constructor(length) {\n        const logBase2 = (num) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt((Math.log(num) / LOG_2), 10);\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        const mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    nextBitIsOne() {\n        //noinspection JSBitwiseOperatorUsage\n        const result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    const buildBalancedTree = function (low, high) {\n        const length = high - low;\n        let namedNode;\n        let key;\n        if (length === 0) {\n            return null;\n        }\n        else if (length === 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const middle = parseInt((length / 2), 10) + low;\n            const left = buildBalancedTree(low, middle);\n            const right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    const buildFrom12Array = function (base12) {\n        let node = null;\n        let root = null;\n        let index = childList.length;\n        const buildPennant = function (chunkSize, color) {\n            const low = index - chunkSize;\n            const high = index;\n            index -= chunkSize;\n            const childTree = buildBalancedTree(low + 1, high);\n            const namedNode = childList[low];\n            const key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        const attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (let i = 0; i < base12.count; ++i) {\n            const isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    const base12 = new Base12Num(childList.length);\n    const root = buildFrom12Array(base12);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n    /**\n     * The default IndexMap for nodes without a priority\n     */\n    static get Default() {\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n        _defaultIndexMap =\n            _defaultIndexMap ||\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n        return _defaultIndexMap;\n    }\n    constructor(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    get(indexKey) {\n        const sortedMap = safeGet(this.indexes_, indexKey);\n        if (!sortedMap) {\n            throw new Error('No index defined for ' + indexKey);\n        }\n        if (sortedMap instanceof SortedMap) {\n            return sortedMap;\n        }\n        else {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n    }\n    hasIndex(indexDefinition) {\n        return contains(this.indexSet_, indexDefinition.toString());\n    }\n    addIndex(indexDefinition, existingChildren) {\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        const childList = [];\n        let sawIndexedValue = false;\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\n        let next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        let newIndex;\n        if (sawIndexedValue) {\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        const indexName = indexDefinition.toString();\n        const newIndexSet = Object.assign({}, this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        const newIndexes = Object.assign({}, this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     */\n    addToIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n            const index = safeGet(this.indexSet_, indexName);\n            assert(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    const childList = [];\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\n                    let next = iter.getNext();\n                    while (next) {\n                        if (next.name !== namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                let newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\n     * Create a new IndexMap instance with the given value removed\n     */\n    removeFromIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n    static get EMPTY_NODE() {\n        return (EMPTY_NODE ||\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\n    }\n    /**\n     * @param children_ - List of children of this node..\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            const child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return this;\n        }\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n        return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            const namedNode = new NamedNode(childName, newChildNode);\n            let newChildren, newIndexMap;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            const newPriority = newChildren.isEmpty()\n                ? EMPTY_NODE\n                : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n        if (this.isEmpty()) {\n            return null;\n        }\n        const obj = {};\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            // eslint-disable-next-line guard-for-in\n            for (const key in obj) {\n                array[key] = obj[key];\n            }\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.getPriority().isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.getPriority().val()) +\n                        ':';\n            }\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                const childHash = childNode.hash();\n                if (childHash !== '') {\n                    toHash += ':' + key + ':' + childHash;\n                }\n            });\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    }\n    getFirstChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    }\n    getFirstChild(indexDefinition) {\n        const minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     */\n    getLastChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    }\n    getLastChild(indexDefinition) {\n        const maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    }\n    forEachChild(index, action) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(wrappedNode => {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    }\n    getIterator(indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, key => key);\n        }\n        else {\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    getReverseIterator(indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, key => {\n                return key;\n            });\n        }\n        else {\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    compareTo(other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    }\n    withIndex(indexDefinition) {\n        if (indexDefinition === KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    }\n    isIndexed(index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            const otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                const thisIter = this.getIterator(PRIORITY_INDEX);\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                let thisCurrent = thisIter.getNext();\n                let otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     */\n    resolveIndex_(indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n    constructor() {\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n    }\n    compareTo(other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    equals(other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    }\n    getPriority() {\n        return this;\n    }\n    getImmediateChild(childName) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    isEmpty() {\n        return false;\n    }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(MAX_NAME, MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n    if (json === null) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    assert(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        const jsonLeaf = json;\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        const children = [];\n        let childrenHavePriority = false;\n        const hinzeJsonObj = json;\n        each(hinzeJsonObj, (key, child) => {\n            if (key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                const childNode = nodeFromJSON(child);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority =\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\n                    children.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children.length === 0) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n        if (childrenHavePriority) {\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n        }\n    }\n    else {\n        let node = ChildrenNode.EMPTY_NODE;\n        each(json, (key, childData) => {\n            if (contains(json, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    const childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\n                        node = node.updateImmediateChild(key, childNode);\n                    }\n                }\n            }\n        });\n        return node.updatePriority(nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n    constructor(indexPath_) {\n        super();\n        this.indexPath_ = indexPath_;\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    }\n    extractChild(snap) {\n        return snap.getChild(this.indexPath_);\n    }\n    isDefinedOn(node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    }\n    compare(a, b) {\n        const aChild = this.extractChild(a.node);\n        const bChild = this.extractChild(b.node);\n        const indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    }\n    maxPost() {\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    }\n    toString() {\n        return pathSlice(this.indexPath_, 0).join('/');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n    compare(a, b) {\n        const indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return true;\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MAX;\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.value';\n    }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n    return {\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n        snapshotNode,\n        childName,\n        oldSnap\n    };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n    constructor(index_) {\n        this.index_ = index_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        const oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n                }\n                else {\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (oldSnap.hasChild(key)) {\n                        const oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    }\n    updatePriority(oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    }\n    filtersNodes() {\n        return false;\n    }\n    getIndexedFilter() {\n        return this;\n    }\n    getIndex() {\n        return this.index_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n    constructor(params) {\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    getStartPost() {\n        return this.startPost_;\n    }\n    getEndPost() {\n        return this.endPost_;\n    }\n    matches(node) {\n        const isWithinStart = this.startIsInclusive_\n            ? this.index_.compare(this.getStartPost(), node) <= 0\n            : this.index_.compare(this.getStartPost(), node) < 0;\n        const isWithinEnd = this.endIsInclusive_\n            ? this.index_.compare(node, this.getEndPost()) <= 0\n            : this.index_.compare(node, this.getEndPost()) < 0;\n        return isWithinStart && isWithinEnd;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode.EMPTY_NODE;\n        }\n        let filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        const self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.indexedFilter_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    static getStartPost_(params) {\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    }\n    static getEndPost_(params) {\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n    constructor(params) {\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n        this.withinStartPost = (node) => {\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.withinEndPost = (node) => {\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.rangedFilter_ = new RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        let filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                let iterator;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    const next = iterator.getNext();\n                    if (!this.withinDirectionalStart(next)) {\n                        // if we have not reached the start, skip to the next element\n                        continue;\n                    }\n                    else if (!this.withinDirectionalEnd(next)) {\n                        // if we have reached the end, stop adding elements\n                        break;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n                let iterator;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext()) {\n                    const next = iterator.getNext();\n                    const inRange = count < this.limit_ &&\n                        this.withinDirectionalStart(next) &&\n                        this.withinDirectionalEnd(next);\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.rangedFilter_.getIndexedFilter();\n    }\n    getIndex() {\n        return this.index_;\n    }\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        let cmp;\n        if (this.reverse_) {\n            const indexCmp = this.index_.getCompare();\n            cmp = (a, b) => indexCmp(b, a);\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        const oldEventCache = snap;\n        assert(oldEventCache.numChildren() === this.limit_, '');\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\n        const windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n                }\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n    constructor() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    hasStart() {\n        return this.startSet_;\n    }\n    /**\n     * @returns True if it would return from left.\n     */\n    isViewFromLeft() {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n        }\n    }\n    /**\n     * Only valid to call if hasStart() returns true\n     */\n    getIndexStartValue() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    }\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     */\n    getIndexStartName() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return MIN_NAME;\n        }\n    }\n    hasEnd() {\n        return this.endSet_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     */\n    getIndexEndValue() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     */\n    getIndexEndName() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return MAX_NAME;\n        }\n    }\n    hasLimit() {\n        return this.limitSet_;\n    }\n    /**\n     * @returns True if a limit has been set and it has been explicitly anchored\n     */\n    hasAnchoredLimit() {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\n     * Only valid to call if hasLimit() returns true\n     */\n    getLimit() {\n        assert(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    loadsAllData() {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n    isDefault() {\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n    copy() {\n        const copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.startAfterSet_ = this.startAfterSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.endBeforeSet_ = this.endBeforeSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n    if (queryParams.loadsAllData()) {\n        return new IndexedFilter(queryParams.getIndex());\n    }\n    else if (queryParams.hasLimit()) {\n        return new LimitedFilter(queryParams);\n    }\n    else {\n        return new RangedFilter(queryParams);\n    }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n    return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n        newParams.startNameSet_ = true;\n        newParams.indexStartName_ = key;\n    }\n    else {\n        newParams.startNameSet_ = false;\n        newParams.indexStartName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsStartAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n    }\n    params.startAfterSet_ = true;\n    return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n        newParams.endNameSet_ = true;\n        newParams.indexEndName_ = key;\n    }\n    else {\n        newParams.endNameSet_ = false;\n        newParams.indexEndName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsEndAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n    }\n    params.endBeforeSet_ = true;\n    return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n    const newParams = queryParams.copy();\n    newParams.index_ = index;\n    return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n    const qs = {};\n    if (queryParams.isDefault()) {\n        return qs;\n    }\n    let orderBy;\n    if (queryParams.index_ === PRIORITY_INDEX) {\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n    }\n    else if (queryParams.index_ === VALUE_INDEX) {\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n    }\n    else if (queryParams.index_ === KEY_INDEX) {\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n    }\n    else {\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n        orderBy = queryParams.index_.toString();\n    }\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n    if (queryParams.startSet_) {\n        const startParam = queryParams.startAfterSet_\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n        qs[startParam] = stringify(queryParams.indexStartValue_);\n        if (queryParams.startNameSet_) {\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n        }\n    }\n    if (queryParams.endSet_) {\n        const endParam = queryParams.endBeforeSet_\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n        qs[endParam] = stringify(queryParams.indexEndValue_);\n        if (queryParams.endNameSet_) {\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n        }\n    }\n    if (queryParams.limitSet_) {\n        if (queryParams.isViewFromLeft()) {\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n        }\n        else {\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n        }\n    }\n    return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n    const obj = {};\n    if (queryParams.startSet_) {\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\n            queryParams.indexStartValue_;\n        if (queryParams.startNameSet_) {\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\n                queryParams.indexStartName_;\n        }\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\n            !queryParams.startAfterSet_;\n    }\n    if (queryParams.endSet_) {\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n        if (queryParams.endNameSet_) {\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n        }\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\n            !queryParams.endBeforeSet_;\n    }\n    if (queryParams.limitSet_) {\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n        let viewFrom = queryParams.viewFrom_;\n        if (viewFrom === '') {\n            if (queryParams.isViewFromLeft()) {\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n            }\n            else {\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n            }\n        }\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (queryParams.index_ !== PRIORITY_INDEX) {\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n    }\n    return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n    reportStats(stats) {\n        throw new Error('Method not implemented.');\n    }\n    static getListenId_(query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n            return query._path.toString();\n        }\n    }\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        /** @private {function(...[*])} */\n        this.log_ = logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         */\n        this.listens_ = {};\n    }\n    /** @inheritDoc */\n    listen(query, currentHashFn, tag, onComplete) {\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n        // Mark this listener so we can tell if it's removed.\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        const thisListen = {};\n        this.listens_[listenId] = thisListen;\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if (safeGet(this.listens_, listenId) === thisListen) {\n                let status;\n                if (!error) {\n                    status = 'ok';\n                }\n                else if (error === 401) {\n                    status = 'permission_denied';\n                }\n                else {\n                    status = 'rest_error:' + error;\n                }\n                onComplete(status, null);\n            }\n        });\n    }\n    /** @inheritDoc */\n    unlisten(query, tag) {\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    }\n    get(query) {\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        const pathString = query._path.toString();\n        const deferred = new Deferred();\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, \n                /*isMerge=*/ false, \n                /*tag=*/ null);\n                deferred.resolve(data);\n            }\n            else {\n                deferred.reject(new Error(data));\n            }\n        });\n        return deferred.promise;\n    }\n    /** @inheritDoc */\n    refreshAuthToken(token) {\n        // no-op since we just always call getToken.\n    }\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     */\n    restRequest_(pathString, queryStringParameters = {}, callback) {\n        queryStringParameters['format'] = 'export';\n        return Promise.all([\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n        ]).then(([authToken, appCheckToken]) => {\n            if (authToken && authToken.accessToken) {\n                queryStringParameters['auth'] = authToken.accessToken;\n            }\n            if (appCheckToken && appCheckToken.token) {\n                queryStringParameters['ac'] = appCheckToken.token;\n            }\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\n                this.repoInfo_.host +\n                pathString +\n                '?' +\n                'ns=' +\n                this.repoInfo_.namespace +\n                querystring(queryStringParameters);\n            this.log_('Sending REST request for ' + url);\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (callback && xhr.readyState === 4) {\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    let res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = jsonEval(xhr.responseText);\n                        }\n                        catch (e) {\n                            warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n    constructor() {\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\n    }\n    getNode(path) {\n        return this.rootNode_.getChild(path);\n    }\n    updateSnapshot(path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n    return {\n        value: null,\n        children: new Map()\n    };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = data;\n        sparseSnapshotTree.children.clear();\n    }\n    else if (sparseSnapshotTree.value !== null) {\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n    }\n    else {\n        const childKey = pathGetFront(path);\n        if (!sparseSnapshotTree.children.has(childKey)) {\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n        }\n        const child = sparseSnapshotTree.children.get(childKey);\n        path = pathPopFront(path);\n        sparseSnapshotTreeRemember(child, path, data);\n    }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = null;\n        sparseSnapshotTree.children.clear();\n        return true;\n    }\n    else {\n        if (sparseSnapshotTree.value !== null) {\n            if (sparseSnapshotTree.value.isLeafNode()) {\n                // We're trying to forget a node that doesn't exist\n                return false;\n            }\n            else {\n                const value = sparseSnapshotTree.value;\n                sparseSnapshotTree.value = null;\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n                });\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n            }\n        }\n        else if (sparseSnapshotTree.children.size > 0) {\n            const childKey = pathGetFront(path);\n            path = pathPopFront(path);\n            if (sparseSnapshotTree.children.has(childKey)) {\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n                if (safeToRemove) {\n                    sparseSnapshotTree.children.delete(childKey);\n                }\n            }\n            return sparseSnapshotTree.children.size === 0;\n        }\n        else {\n            return true;\n        }\n    }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n    if (sparseSnapshotTree.value !== null) {\n        func(prefixPath, sparseSnapshotTree.value);\n    }\n    else {\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n            const path = new Path(prefixPath.toString() + '/' + key);\n            sparseSnapshotTreeForEachTree(tree, path, func);\n        });\n    }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n    sparseSnapshotTree.children.forEach((tree, key) => {\n        func(key, tree);\n    });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n    constructor(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    get() {\n        const newStats = this.collection_.get();\n        const delta = Object.assign({}, newStats);\n        if (this.last_) {\n            each(this.last_, (stat, value) => {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n    constructor(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        const timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    reportStats_() {\n        const stats = this.statsListener_.get();\n        const reportedStats = {};\n        let haveStatsToReport = false;\n        each(stats, (stat, value) => {\n            if (value > 0 && contains(this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n    return {\n        fromUser: true,\n        fromServer: false,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServer() {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId,\n        tagged: true\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n    /**\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n     */\n    constructor(\n    /** @inheritDoc */ path, \n    /** @inheritDoc */ affectedTree, \n    /** @inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = newOperationSourceUser();\n    }\n    operationForChild(childName) {\n        if (!pathIsEmpty(this.path)) {\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            const childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n    constructor(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new ListenComplete(this.source, newEmptyPath());\n        }\n        else {\n            return new ListenComplete(this.source, pathPopFront(this.path));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n    constructor(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n    constructor(\n    /** @inheritDoc */ source, \n    /** @inheritDoc */ path, \n    /** @inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            const childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, newEmptyPath(), childTree);\n            }\n        }\n        else {\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, pathPopFront(this.path), this.children);\n        }\n    }\n    toString() {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n    constructor(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     */\n    isFullyInitialized() {\n        return this.fullyInitialized_;\n    }\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     */\n    isFiltered() {\n        return this.filtered_;\n    }\n    isCompleteForPath(path) {\n        if (pathIsEmpty(path)) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        const childKey = pathGetFront(path);\n        return this.isCompleteForChild(childKey);\n    }\n    isCompleteForChild(key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    }\n    getNode() {\n        return this.node_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n    constructor(query_) {\n        this.query_ = query_;\n        this.index_ = this.query_._queryParams.getIndex();\n    }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n    const events = [];\n    const moves = [];\n    changes.forEach(change => {\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\n        }\n    });\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n    return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n    filteredChanges.forEach(change => {\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n        registrations.forEach(registration => {\n            if (registration.respondsTo(change.type)) {\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n            }\n        });\n    });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n        return change;\n    }\n    else {\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n        return change;\n    }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n    if (a.childName == null || b.childName == null) {\n        throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n    return { eventCache, serverCache };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n    return viewCache.eventCache.isFullyInitialized()\n        ? viewCache.eventCache.getNode()\n        : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n    return viewCache.serverCache.isFullyInitialized()\n        ? viewCache.serverCache.getNode()\n        : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n    static fromObject(obj) {\n        let tree = new ImmutableTree(null);\n        each(obj, (childPath, childSnap) => {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    }\n    constructor(value, children = EmptyChildren()) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * True if the value is empty and there are no children\n     */\n    isEmpty() {\n        return this.value === null && this.children.isEmpty();\n    }\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param relativePath - The remainder of the path\n     * @param predicate - The predicate to satisfy to return a node\n     */\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: newEmptyPath(), value: this.value };\n        }\n        else {\n            if (pathIsEmpty(relativePath)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(relativePath);\n                const child = this.children.get(front);\n                if (child !== null) {\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n                    if (childExistingPathAndValue != null) {\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     */\n    findRootMostValueAndPath(relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n    }\n    /**\n     * @returns The subtree at the given path\n     */\n    subtree(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(pathPopFront(relativePath));\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param relativePath - Path to set value at.\n     * @param toSet - Value to set.\n     * @returns Resulting tree.\n     */\n    set(relativePath, toSet) {\n        if (pathIsEmpty(relativePath)) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.set(pathPopFront(relativePath), toSet);\n            const newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param relativePath - Path to value to remove.\n     * @returns Resulting tree.\n     */\n    remove(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            if (this.children.isEmpty()) {\n                return new ImmutableTree(null);\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                const newChild = child.remove(pathPopFront(relativePath));\n                let newChildren;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return new ImmutableTree(null);\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    }\n    /**\n     * Gets a value from the tree.\n     *\n     * @param relativePath - Path to get value for.\n     * @returns Value at path, or null.\n     */\n    get(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this.value;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                return child.get(pathPopFront(relativePath));\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param relativePath - Path to replace subtree for.\n     * @param newTree - New tree.\n     * @returns Resulting tree.\n     */\n    setTree(relativePath, newTree) {\n        if (pathIsEmpty(relativePath)) {\n            return newTree;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\n            let newChildren;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     */\n    fold(fn) {\n        return this.fold_(newEmptyPath(), fn);\n    }\n    /**\n     * Recursive helper for public-facing fold() method\n     */\n    fold_(pathSoFar, fn) {\n        const accum = {};\n        this.children.inorderTraversal((childKey, childTree) => {\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    }\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     */\n    findOnPath(path, f) {\n        return this.findOnPath_(path, newEmptyPath(), f);\n    }\n    findOnPath_(pathToFollow, pathSoFar, f) {\n        const result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathIsEmpty(pathToFollow)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(pathToFollow);\n                const nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    foreachOnPath(path, f) {\n        return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\n        if (pathIsEmpty(pathToFollow)) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            const front = pathGetFront(pathToFollow);\n            const nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param f - A function to be called with the path from the root of the tree to\n     * a node, and the value at that node. Called in depth-first order.\n     */\n    foreach(f) {\n        this.foreach_(newEmptyPath(), f);\n    }\n    foreach_(currentRelativePath, f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    }\n    foreachChild(f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n    constructor(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    static empty() {\n        return new CompoundWrite(new ImmutableTree(null));\n    }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n    if (pathIsEmpty(path)) {\n        return new CompoundWrite(new ImmutableTree(node));\n    }\n    else {\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            const rootMostPath = rootmost.path;\n            let value = rootmost.value;\n            const relativePath = newRelativePath(rootMostPath, path);\n            value = value.updateChild(relativePath, node);\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n        }\n        else {\n            const subtree = new ImmutableTree(node);\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n            return new CompoundWrite(newWriteTree);\n        }\n    }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n    let newWrite = compoundWrite;\n    each(updates, (childKey, node) => {\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n    });\n    return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return CompoundWrite.empty();\n    }\n    else {\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n        return new CompoundWrite(newWriteTree);\n    }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n        return compoundWrite.writeTree_\n            .get(rootmost.path)\n            .getChild(newRelativePath(rootmost.path, path));\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n    const children = [];\n    const node = compoundWrite.writeTree_.value;\n    if (node != null) {\n        // If it's a leaf node, it has no children; so nothing to do.\n        if (!node.isLeafNode()) {\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n                children.push(new NamedNode(childName, childNode));\n            });\n        }\n    }\n    else {\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value != null) {\n                children.push(new NamedNode(childName, childTree.value));\n            }\n        });\n    }\n    return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return compoundWrite;\n    }\n    else {\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n        if (shadowingNode != null) {\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\n        }\n        else {\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n        }\n    }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n    return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n        // Since there a write is always a leaf, we're done here\n        return node.updateChild(relativePath, writeTree.value);\n    }\n    else {\n        let priorityWrite = null;\n        writeTree.children.inorderTraversal((childKey, childTree) => {\n            if (childKey === '.priority') {\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                // to apply priorities to empty nodes that are later filled\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                priorityWrite = childTree.value;\n            }\n            else {\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n            }\n        });\n        // If there was a priority write, we only apply it if the node is not empty\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n        }\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n    return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n        visible = true;\n    }\n    writeTree.allWrites.push({\n        path,\n        snap,\n        writeId,\n        visible\n    });\n    if (visible) {\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n    }\n    writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n    writeTree.allWrites.push({\n        path,\n        children: changedChildren,\n        writeId,\n        visible: true\n    });\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n    writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\n        const record = writeTree.allWrites[i];\n        if (record.writeId === writeId) {\n            return record;\n        }\n    }\n    return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    const idx = writeTree.allWrites.findIndex(s => {\n        return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = writeTree.allWrites[idx];\n    writeTree.allWrites.splice(idx, 1);\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n    let i = writeTree.allWrites.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n        const currentWrite = writeTree.allWrites[i];\n        if (currentWrite.visible) {\n            if (i >= idx &&\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n                // The removed write was completely shadowed by a subsequent write.\n                removedWriteWasVisible = false;\n            }\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\n                removedWriteOverlapsWithOtherWrites = true;\n            }\n        }\n        i--;\n    }\n    if (!removedWriteWasVisible) {\n        return false;\n    }\n    else if (removedWriteOverlapsWithOtherWrites) {\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\n        writeTreeResetTree_(writeTree);\n        return true;\n    }\n    else {\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n        if (writeToRemove.snap) {\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n        }\n        else {\n            const children = writeToRemove.children;\n            each(children, (childName) => {\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n            });\n        }\n        return true;\n    }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n    if (writeRecord.snap) {\n        return pathContains(writeRecord.path, path);\n    }\n    else {\n        for (const childName in writeRecord.children) {\n            if (writeRecord.children.hasOwnProperty(childName) &&\n                pathContains(pathChild(writeRecord.path, childName), path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n    if (writeTree.allWrites.length > 0) {\n        writeTree.lastWriteId =\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n    }\n    else {\n        writeTree.lastWriteId = -1;\n    }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n    return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n        const write = writes[i];\n        // Theory, a later set will either:\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n        if (filter(write)) {\n            const writePath = write.path;\n            let relativePath;\n            if (write.snap) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n                }\n                else ;\n            }\n            else if (write.children) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    if (pathIsEmpty(relativePath)) {\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n                    }\n                    else {\n                        const child = safeGet(write.children, pathGetFront(relativePath));\n                        if (child) {\n                            // There exists a child in this node that matches the root path\n                            const deepNode = child.getChild(pathPopFront(relativePath));\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n                        }\n                    }\n                }\n                else ;\n            }\n            else {\n                throw assertionError('WriteRecord should have .snap or .children');\n            }\n        }\n    }\n    return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n            if (compoundWriteIsEmpty(subMerge)) {\n                return completeServerCache;\n            }\n            else if (completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                return null;\n            }\n            else {\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(subMerge, layeredCache);\n            }\n        }\n    }\n    else {\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n            return completeServerCache;\n        }\n        else {\n            // If the server cache is null, and we don't have a complete cache, we need to return null\n            if (!includeHiddenWrites &&\n                completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n                return null;\n            }\n            else {\n                const filter = function (write) {\n                    return ((write.visible || includeHiddenWrites) &&\n                        (!writeIdsToExclude ||\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\n                        (pathContains(write.path, treePath) ||\n                            pathContains(treePath, write.path)));\n                };\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(mergeAtPath, layeredCache);\n            }\n        }\n    }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n    let completeChildren = ChildrenNode.EMPTY_NODE;\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (topLevelSet) {\n        if (!topLevelSet.isLeafNode()) {\n            // we're shadowing everything. Return the children.\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n            });\n        }\n        return completeChildren;\n    }\n    else if (completeServerChildren) {\n        // Layer any children we have on top of this\n        // We know we don't have a top-level set, so just enumerate existing children\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\n        });\n        // Add any complete children we have from the set\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n    else {\n        // We don't have anything to layer on top of. Layer on any children we have\n        // Note that we can return an empty snap if we have a defined delete\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n        // At this point we can probably guarantee that we're in case 2, meaning no events\n        // May need to check visibility while doing the findRootMostValueAndPath call\n        return null;\n    }\n    else {\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n        if (compoundWriteIsEmpty(childMerge)) {\n            // We're not shadowing at all. Case 1\n            return existingServerSnap.getChild(childPath);\n        }\n        else {\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n            // However this is tricky to find out, since user updates don't necessary change the server\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n            // only check if the updates change the serverNode.\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n        }\n    }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n    if (shadowingNode != null) {\n        return shadowingNode;\n    }\n    else {\n        if (existingServerSnap.isCompleteForChild(childKey)) {\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n    let toIterate;\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n        toIterate = shadowingNode;\n    }\n    else if (completeServerData != null) {\n        toIterate = compoundWriteApply(merge, completeServerData);\n    }\n    else {\n        // no children to iterate on\n        return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n        const nodes = [];\n        const cmp = index.getCompare();\n        const iter = reverse\n            ? toIterate.getReverseIteratorFrom(startPost, index)\n            : toIterate.getIteratorFrom(startPost, index);\n        let next = iter.getNext();\n        while (next && nodes.length < count) {\n            if (cmp(next, startPost) !== 0) {\n                nodes.push(next);\n            }\n            next = iter.getNext();\n        }\n        return nodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction newWriteTree() {\n    return {\n        visibleWrites: CompoundWrite.empty(),\n        allWrites: [],\n        lastWriteId: -1\n    };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n    return {\n        treePath: path,\n        writeTree\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n    constructor() {\n        this.changeMap = new Map();\n    }\n    trackChildChange(change) {\n        const type = change.type;\n        const childKey = change.childName;\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        const oldChange = this.changeMap.get(childKey);\n        if (oldChange) {\n            const oldType = oldChange.type;\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.delete(childKey);\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n            }\n            else {\n                throw assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap.set(childKey, change);\n        }\n    }\n    getChanges() {\n        return Array.from(this.changeMap.values());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n    getCompleteChild(childKey) {\n        return null;\n    }\n    getChildAfterChild(index, child, reverse) {\n        return null;\n    }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    getCompleteChild(childKey) {\n        const node = this.viewCache_.eventCache;\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            const serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.serverCache;\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n        }\n    }\n    getChildAfterChild(index, child, reverse) {\n        const completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n    return { filter };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n        const overwrite = operation;\n        if (overwrite.source.fromUser) {\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(overwrite.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n            // again\n            filterServerNode =\n                overwrite.source.tagged ||\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.MERGE) {\n        const merge = operation;\n        if (merge.source.fromUser) {\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(merge.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered\n            filterServerNode =\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\n        const ackUserWrite = operation;\n        if (!ackUserWrite.revert) {\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n        }\n        else {\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n    }\n    else {\n        throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n    return { viewCache: newViewCache, changes };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n    const eventSnap = newViewCache.eventCache;\n    if (eventSnap.isFullyInitialized()) {\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n        if (accumulator.length > 0 ||\n            !oldViewCache.eventCache.isFullyInitialized() ||\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n        }\n    }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n    const oldEventSnap = viewCache.eventCache;\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n        // we have a shadowing write, ignore changes\n        return viewCache;\n    }\n    else {\n        let newEventCache, serverNode;\n        if (pathIsEmpty(changePath)) {\n            // TODO: figure out how this plays with \"sliding ack windows\"\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n            if (viewCache.serverCache.isFiltered()) {\n                // We need to special case this, because we need to only apply writes to complete children, or\n                // we might end up raising events for incomplete children. If the server data is filtered deep\n                // writes cannot be guaranteed to be complete\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n                const completeChildren = serverCache instanceof ChildrenNode\n                    ? serverCache\n                    : ChildrenNode.EMPTY_NODE;\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n            }\n            else {\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n            }\n        }\n        else {\n            const childKey = pathGetFront(changePath);\n            if (childKey === '.priority') {\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n                const oldEventNode = oldEventSnap.getNode();\n                serverNode = viewCache.serverCache.getNode();\n                // we might have overwrites for this priority\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n                if (updatedPriority != null) {\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n                }\n                else {\n                    // priority didn't change, keep old node\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n            else {\n                const childChangePath = pathPopFront(changePath);\n                // update child\n                let newEventChild;\n                if (oldEventSnap.isCompleteForChild(childKey)) {\n                    serverNode = viewCache.serverCache.getNode();\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n                    if (eventChildUpdate != null) {\n                        newEventChild = oldEventSnap\n                            .getNode()\n                            .getImmediateChild(childKey)\n                            .updateChild(childChangePath, eventChildUpdate);\n                    }\n                    else {\n                        // Nothing changed, just keep the old child\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                    }\n                }\n                else {\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n                }\n                if (newEventChild != null) {\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                }\n                else {\n                    // no complete child available or no change\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n        }\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n    }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    const oldServerSnap = oldViewCache.serverCache;\n    let newServerCache;\n    const serverFilter = filterServerNode\n        ? viewProcessor.filter\n        : viewProcessor.filter.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    }\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n        const newServerNode = oldServerSnap\n            .getNode()\n            .updateChild(changePath, changedSnap);\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\n            pathGetLength(changePath) > 1) {\n            // We don't update incomplete nodes with updates intended for other listeners\n            return oldViewCache;\n        }\n        const childChangePath = pathPopFront(changePath);\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n        if (childKey === '.priority') {\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n        }\n        else {\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n        }\n    }\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    const oldEventSnap = oldViewCache.eventCache;\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (pathIsEmpty(changePath)) {\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n        }\n        else {\n            const childChangePath = pathPopFront(changePath);\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            let newChild;\n            if (pathIsEmpty(childChangePath)) {\n                // Child overwrite, we can replace the child\n                newChild = changedSnap;\n            }\n            else {\n                const childNode = source.getCompleteChild(childKey);\n                if (childNode != null) {\n                    if (pathGetBack(childChangePath) === '.priority' &&\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n                        // This is a priority update on an empty node. If this node exists on the server, the\n                        // server will send down the priority in the update, so ignore for now\n                        newChild = childNode;\n                    }\n                    else {\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\n                    }\n                }\n                else {\n                    // There is no complete child node available\n                    newChild = ChildrenNode.EMPTY_NODE;\n                }\n            }\n            if (!oldChild.equals(newChild)) {\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n            }\n            else {\n                newViewCache = oldViewCache;\n            }\n        }\n    }\n    return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n    return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n    merge.foreach((relativePath, childNode) => {\n        node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.serverCache.getNode().isEmpty() &&\n        !viewCache.serverCache.isFullyInitialized()) {\n        return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n        viewMergeTree = changedChildren;\n    }\n    else {\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.serverCache.getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n        if (serverNode.hasChild(childKey)) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\n            childMergeTree.value === null;\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n        return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.serverCache.isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.serverCache;\n    if (affectedTree.value != null) {\n        // This is an overwrite.\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n            serverCache.isCompleteForPath(ackPath)) {\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else if (pathIsEmpty(ackPath)) {\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n            // should just re-apply whatever we have in our cache as a merge.\n            let changedChildren = new ImmutableTree(null);\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n                changedChildren = changedChildren.set(new Path(name), node);\n            });\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else {\n            return viewCache;\n        }\n    }\n    else {\n        // This is a merge.\n        let changedChildren = new ImmutableTree(null);\n        affectedTree.foreach((mergePath, value) => {\n            const serverCachePath = pathChild(ackPath, mergePath);\n            if (serverCache.isCompleteForPath(serverCachePath)) {\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n            }\n        });\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n    const oldServerNode = viewCache.serverCache;\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n    let complete;\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n        return viewCache;\n    }\n    else {\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n        const oldEventCache = viewCache.eventCache.getNode();\n        let newEventCache;\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n            let newNode;\n            if (viewCache.serverCache.isFullyInitialized()) {\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n            }\n            else {\n                const serverChildren = viewCache.serverCache.getNode();\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n            }\n            newNode = newNode;\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n        }\n        else {\n            const childKey = pathGetFront(path);\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n            if (newChild == null &&\n                viewCache.serverCache.isCompleteForChild(childKey)) {\n                newChild = oldEventCache.getImmediateChild(childKey);\n            }\n            if (newChild != null) {\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n            }\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n                // No complete child available, delete the existing one, if any\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n            }\n            else {\n                newEventCache = oldEventCache;\n            }\n            if (newEventCache.isEmpty() &&\n                viewCache.serverCache.isFullyInitialized()) {\n                // We might have reverted all child writes. Maybe the old event was a leaf node\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                if (complete.isLeafNode()) {\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n                }\n            }\n        }\n        complete =\n            viewCache.serverCache.isFullyInitialized() ||\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n    constructor(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        const params = this.query_._queryParams;\n        const indexFilter = new IndexedFilter(params.getIndex());\n        const filter = queryParamsGetNodeFilter(params);\n        this.processor_ = newViewProcessor(filter);\n        const initialServerCache = initialViewCache.serverCache;\n        const initialEventCache = initialViewCache.eventCache;\n        // Don't filter server node with other filter than index, wait for tagged listen\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    get query() {\n        return this.query_;\n    }\n}\nfunction viewGetServerCache(view) {\n    return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n    if (cache) {\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n        // we need to see if it contains the child we're interested in.\n        if (view.query._queryParams.loadsAllData() ||\n            (!pathIsEmpty(path) &&\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\n            return cache.getChild(path);\n        }\n    }\n    return null;\n}\nfunction viewIsEmpty(view) {\n    return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n    view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n    const cancelEvents = [];\n    if (cancelError) {\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n        const path = view.query._path;\n        view.eventRegistrations_.forEach(registration => {\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\n            if (maybeEvent) {\n                cancelEvents.push(maybeEvent);\n            }\n        });\n    }\n    if (eventRegistration) {\n        let remaining = [];\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n            const existing = view.eventRegistrations_[i];\n            if (!existing.matches(eventRegistration)) {\n                remaining.push(existing);\n            }\n            else if (eventRegistration.hasAnyCallback()) {\n                // We're removing just this one\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n                break;\n            }\n        }\n        view.eventRegistrations_ = remaining;\n    }\n    else {\n        view.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE &&\n        operation.source.queryId !== null) {\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n    }\n    const oldViewCache = view.viewCache_;\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    view.viewCache_ = result.viewCache;\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n    const eventSnap = view.viewCache_.eventCache;\n    const initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n        const eventNode = eventSnap.getNode();\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            initialChanges.push(changeChildAdded(key, childNode));\n        });\n    }\n    if (eventSnap.isFullyInitialized()) {\n        initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n    const registrations = eventRegistration\n        ? [eventRegistration]\n        : view.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n    constructor() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         */\n        this.views = new Map();\n    }\n}\nfunction syncPointSetReferenceConstructor(val) {\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n    referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n    return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n    return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n        const view = syncPoint.views.get(queryId);\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n    }\n    else {\n        let events = [];\n        for (const view of syncPoint.views.values()) {\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n        }\n        return events;\n    }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n    const queryId = query._queryIdentifier;\n    const view = syncPoint.views.get(queryId);\n    if (!view) {\n        // TODO: make writesCache take flag for complete server node\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n        let eventCacheComplete = false;\n        if (eventCache) {\n            eventCacheComplete = true;\n        }\n        else if (serverCache instanceof ChildrenNode) {\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n            eventCacheComplete = false;\n        }\n        else {\n            eventCache = ChildrenNode.EMPTY_NODE;\n            eventCacheComplete = false;\n        }\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n        return new View(query, viewCache);\n    }\n    return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n    if (!syncPoint.views.has(query._queryIdentifier)) {\n        syncPoint.views.set(query._queryIdentifier, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    viewAddEventRegistration(view, eventRegistration);\n    return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n    const queryId = query._queryIdentifier;\n    const removed = [];\n    let cancelEvents = [];\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\n    if (queryId === 'default') {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(viewQueryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    else {\n        // remove the callback from the specific view.\n        const view = syncPoint.views.get(queryId);\n        if (view) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(queryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n        // We removed our last complete view.\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n    }\n    return { removed, events: cancelEvents };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n    const result = [];\n    for (const view of syncPoint.views.values()) {\n        if (!view.query._queryParams.loadsAllData()) {\n            result.push(view);\n        }\n    }\n    return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n    let serverCache = null;\n    for (const view of syncPoint.views.values()) {\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n    return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n    const params = query._queryParams;\n    if (params.loadsAllData()) {\n        return syncPointGetCompleteView(syncPoint);\n    }\n    else {\n        const queryId = query._queryIdentifier;\n        return syncPoint.views.get(queryId);\n    }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n    return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n    return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n    for (const view of syncPoint.views.values()) {\n        if (view.query._queryParams.loadsAllData()) {\n            return view;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\n    referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\n    return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n    /**\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    constructor(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         */\n        this.syncPointTree_ = new ImmutableTree(null);\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         */\n        this.pendingWriteTree_ = newWriteTree();\n        this.tagToQueryMap = new Map();\n        this.queryToTagMap = new Map();\n    }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n    // Record pending write.\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n    if (!visible) {\n        return [];\n    }\n    else {\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n    }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n    // Record pending merge.\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n    if (!needToReevaluate) {\n        return [];\n    }\n    else {\n        let affectedTree = new ImmutableTree(null);\n        if (write.snap != null) {\n            // overwrite\n            affectedTree = affectedTree.set(newEmptyPath(), true);\n        }\n        else {\n            each(write.children, (pathString) => {\n                affectedTree = affectedTree.set(new Path(pathString), true);\n            });\n        }\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n    }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query._path;\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n    let cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint &&\n        (query._queryIdentifier === 'default' ||\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n        if (syncPointIsEmpty(maybeSyncPoint)) {\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n        }\n        const removed = removedAndEvents.removed;\n        cancelEvents = removedAndEvents.events;\n        if (!skipListenerDedup) {\n            /**\n             * We may have just removed one of many listeners and can short-circuit this whole process\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n             * properly set up.\n             */\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            const removingDefault = -1 !==\n                removed.findIndex(query => {\n                    return query._queryParams.loadsAllData();\n                });\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n            if (removingDefault && !covered) {\n                const subtree = syncTree.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (let i = 0; i < newViews.length; ++i) {\n                        const view = newViews[i], newQuery = view.query;\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                // Otherwise there's nothing below us, so nothing we need to start listening on\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    const defaultTag = null;\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach((queryToRemove) => {\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n        }\n        // Now, clear all of the tags we're tracking for the removed listens\n        syncTreeRemoveTags_(syncTree, removed);\n    }\n    return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey != null) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // Query must have been removed already\n        return [];\n    }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const changeTree = ImmutableTree.fromObject(changedChildren);\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n    const path = query._path;\n    let serverCache = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let serverCacheComplete;\n    if (serverCache != null) {\n        serverCacheComplete = true;\n    }\n    else {\n        serverCacheComplete = false;\n        serverCache = ChildrenNode.EMPTY_NODE;\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        subtree.foreachChild((childName, childSyncPoint) => {\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n            if (completeCache) {\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\n            }\n        });\n    }\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n        // We need to track a tag for this query\n        const queryKey = syncTreeMakeQueryKey_(query);\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n        const tag = syncTreeGetNextQueryTag_();\n        syncTree.queryToTagMap.set(queryKey, tag);\n        syncTree.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n        const view = syncPointViewForQuery(syncPoint, query);\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n    }\n    return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n    const includeHiddenSets = true;\n    const writeTree = syncTree.pendingWriteTree_;\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n        if (serverCache) {\n            return serverCache;\n        }\n    });\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n    const path = query._path;\n    let serverCache = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode = serverCacheComplete\n        ? new CacheNode(serverCache, true, false)\n        : null;\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n    return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n    if (pathIsEmpty(operation.path)) {\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    }\n    else {\n        const syncPoint = syncPointTree.get(newEmptyPath());\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n        }\n        let events = [];\n        const childName = pathGetFront(operation.path);\n        const childOperation = operation.operationForChild(childName);\n        const childTree = syncPointTree.children.get(childName);\n        if (childTree && childOperation) {\n            const childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n        if (syncPoint) {\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n        }\n        return events;\n    }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n        const childServerCache = serverCache\n            ? serverCache.getImmediateChild(childName)\n            : null;\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\n        const childOperation = operation.operationForChild(childName);\n        if (childOperation) {\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n    });\n    if (syncPoint) {\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n    const query = view.query;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    return {\n        hashFn: () => {\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n            return cache.hash();\n        },\n        onComplete: (status) => {\n            if (status === 'ok') {\n                if (tag) {\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n                }\n                else {\n                    return syncTreeApplyListenComplete(syncTree, query._path);\n                }\n            }\n            else {\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                const error = errorForServerCode(status, query);\n                return syncTreeRemoveEventRegistration(syncTree, query, \n                /*eventRegistration*/ null, error);\n            }\n        }\n    };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n    const queryKey = syncTreeMakeQueryKey_(query);\n    return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n    return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n    return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n    const splitIndex = queryKey.indexOf('$');\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n        queryId: queryKey.substr(splitIndex + 1),\n        path: new Path(queryKey.substr(0, splitIndex))\n    };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n            return [completeView];\n        }\n        else {\n            // No complete view here, flatten any deeper listens into an array\n            let views = [];\n            if (maybeChildSyncPoint) {\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\n            }\n            each(childMap, (_key, childViews) => {\n                views = views.concat(childViews);\n            });\n            return views;\n        }\n    });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n        // We treat queries that load all data as default queries\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n        // from Query\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n    }\n    else {\n        return query;\n    }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n    for (let j = 0; j < queries.length; ++j) {\n        const removedQuery = queries[j];\n        if (!removedQuery._queryParams.loadsAllData()) {\n            // We should have a tag for this\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n            syncTree.queryToTagMap.delete(removedQueryKey);\n            syncTree.tagToQueryMap.delete(removedQueryTag);\n        }\n    }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n    return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n    const path = query._path;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n    }\n    else {\n        // Shadow everything at or below this location, this is a default listener.\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n            if (!pathIsEmpty(relativePath) &&\n                maybeChildSyncPoint &&\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n            }\n            else {\n                // No default listener here, flatten any deeper queries into an array\n                let queries = [];\n                if (maybeChildSyncPoint) {\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n                }\n                each(childMap, (_key, childQueries) => {\n                    queries = queries.concat(childQueries);\n                });\n                return queries;\n            }\n        });\n        for (let i = 0; i < queriesToStop.length; ++i) {\n            const queryToStop = queriesToStop[i];\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n        }\n    }\n    return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n    constructor(node_) {\n        this.node_ = node_;\n    }\n    getImmediateChild(childName) {\n        const child = this.node_.getImmediateChild(childName);\n        return new ExistingValueProvider(child);\n    }\n    node() {\n        return this.node_;\n    }\n}\nclass DeferredValueProvider {\n    constructor(syncTree, path) {\n        this.syncTree_ = syncTree;\n        this.path_ = path;\n    }\n    getImmediateChild(childName) {\n        const childPath = pathChild(this.path_, childName);\n        return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n    node() {\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    if (typeof value['.sv'] === 'string') {\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n    }\n    else if (typeof value['.sv'] === 'object') {\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\n    }\n    else {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n    }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n    switch (op) {\n        case 'timestamp':\n            return serverValues['timestamp'];\n        default:\n            assert(false, 'Unexpected server value: ' + op);\n    }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n    if (!op.hasOwnProperty('increment')) {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n    }\n    const delta = op['increment'];\n    if (typeof delta !== 'number') {\n        assert(false, 'Unexpected increment value: ' + delta);\n    }\n    const existingNode = existing.node();\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n    // Incrementing a non-number sets the value to the incremented amount\n    if (!existingNode.isLeafNode()) {\n        return delta;\n    }\n    const leaf = existingNode;\n    const existingVal = leaf.getValue();\n    if (typeof existingVal !== 'number') {\n        return delta;\n    }\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n    return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n    const rawPri = node.getPriority().val();\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n    let newNode;\n    if (node.isLeafNode()) {\n        const leafNode = node;\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode(value, nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        const childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n    /**\n     * @param name - Optional name of the node.\n     * @param parent - Optional parent node.\n     * @param node - Optional node to wrap.\n     */\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\n        this.name = name;\n        this.parent = parent;\n        this.node = node;\n    }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = tree, next = pathGetFront(path);\n    while (next !== null) {\n        const childNode = safeGet(child.node.children, next) || {\n            children: {},\n            childCount: 0\n        };\n        child = new Tree(next, child, childNode);\n        path = pathPopFront(path);\n        next = pathGetFront(path);\n    }\n    return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n    return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n    tree.node.value = value;\n    treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n    return tree.node.childCount > 0;\n}\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n    each(tree.node.children, (child, childTree) => {\n        action(new Tree(child, tree, childTree));\n    });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n        action(tree);\n    }\n    treeForEachChild(tree, child => {\n        treeForEachDescendant(child, action, true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n        action(tree);\n    }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n    let node = includeSelf ? tree : tree.parent;\n    while (node !== null) {\n        if (action(node)) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n    return new Path(tree.parent === null\n        ? tree.name\n        : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n    if (tree.parent !== null) {\n        treeUpdateChild(tree.parent, tree.name, tree);\n    }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n    const childEmpty = treeIsEmpty(child);\n    const childExists = contains(tree.node.children, childName);\n    if (childEmpty && childExists) {\n        delete tree.node.children[childName];\n        tree.node.childCount--;\n        treeUpdateParents(tree);\n    }\n    else if (!childEmpty && !childExists) {\n        tree.node.children[childName] = child.node;\n        tree.node.childCount++;\n        treeUpdateParents(tree);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\n};\nconst isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !INVALID_PATH_REGEX_.test(pathString));\n};\nconst isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n        (priority &&\n            typeof priority === 'object' &&\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            contains(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n    if (optional && value === undefined) {\n        return;\n    }\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            validationPathToErrorString(path) +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix +\n            'contains ' +\n            data.toString() +\n            ' ' +\n            validationPathToErrorString(path));\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > MAX_LEAF_SIZE_ / 3 &&\n        stringLength(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            validationPathToErrorString(path) +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        let hasDotValue = false;\n        let hasActualChild = false;\n        each(data, (key, value) => {\n            if (key === '.value') {\n                hasDotValue = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        validationPathToErrorString(path) +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            validationPathPush(path, key);\n            validateFirebaseData(errorPrefix, value, path);\n            validationPathPop(path);\n        });\n        if (hasDotValue && hasActualChild) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                validationPathToErrorString(path) +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    let i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        const keys = pathSlice(curPath);\n        for (let j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\n            else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(pathCompare);\n    let prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n    if (optional && data === undefined) {\n        return;\n    }\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n    }\n    const mergePaths = [];\n    each(data, (key, value) => {\n        const curPath = new Path(key);\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n        if (pathGetBack(curPath) === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix$1 +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n    if (optional && priority === undefined) {\n        return;\n    }\n    if (isInvalidJSONNumber(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    }\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n    }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n    if (optional && key === undefined) {\n        return;\n    }\n    if (!isValidKey(key)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n    }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n    if (optional && pathString === undefined) {\n        return;\n    }\n    if (!isValidPathString(pathString)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n    if (pathGetFront(path) === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n    // TODO = Validate server better.\n    const pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\n        throw new Error(errorPrefix(fnName, 'url') +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n    constructor() {\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         */\n        this.recursionDepth_ = 0;\n    }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n        const data = eventDataList[i];\n        const path = data.getPath();\n        if (currList !== null && !pathEquals(path, currList.path)) {\n            eventQueue.eventLists_.push(currList);\n            currList = null;\n        }\n        if (currList === null) {\n            currList = { events: [], path };\n        }\n        currList.events.push(data);\n    }\n    if (currList) {\n        eventQueue.eventLists_.push(currList);\n    }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\n        pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n    eventQueue.recursionDepth_++;\n    let sentAll = true;\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n        const eventList = eventQueue.eventLists_[i];\n        if (eventList) {\n            const eventPath = eventList.path;\n            if (predicate(eventPath)) {\n                eventListRaise(eventQueue.eventLists_[i]);\n                eventQueue.eventLists_[i] = null;\n            }\n            else {\n                sentAll = false;\n            }\n        }\n    }\n    if (sentAll) {\n        eventQueue.eventLists_ = [];\n    }\n    eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n    for (let i = 0; i < eventList.events.length; i++) {\n        const eventData = eventList.events[i];\n        if (eventData !== null) {\n            eventList.events[i] = null;\n            const eventFn = eventData.getEventRunner();\n            if (logger) {\n                log('event: ' + eventData.toString());\n            }\n            exceptionGuard(eventFn);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n        this.repoInfo_ = repoInfo_;\n        this.forceRestClient_ = forceRestClient_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckProvider_ = appCheckProvider_;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        /** A list of data pieces and paths to be set when this client disconnects. */\n        this.onDisconnect_ = newSparseSnapshotTree();\n        /** Stores queues of outstanding transactions for Firebase locations. */\n        this.transactionQueueTree_ = new Tree();\n        // TODO: This should be @private but it's used by test_access.js and internal.js\n        this.persistentConnection_ = null;\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\n        this.key = this.repoInfo_.toURLString();\n    }\n    /**\n     * @returns The URL corresponding to the root of this Firebase.\n     */\n    toString() {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    }\n}\nfunction repoStart(repo, appId, authOverride) {\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n    if (repo.forceRestClient_ || beingCrawled()) {\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n    }\n    else {\n        // Validate authOverride\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\n            if (typeof authOverride !== 'object') {\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n            }\n            try {\n                stringify(authOverride);\n            }\n            catch (e) {\n                throw new Error('Invalid authOverride provided: ' + e);\n            }\n        }\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, (connectStatus) => {\n            repoOnConnectStatus(repo, connectStatus);\n        }, (updates) => {\n            repoOnServerInfoUpdate(repo, updates);\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n        repo.server_ = repo.persistentConnection_;\n    }\n    repo.authTokenProvider_.addTokenChangeListener(token => {\n        repo.server_.refreshAuthToken(token);\n    });\n    repo.appCheckProvider_.addTokenChangeListener(result => {\n        repo.server_.refreshAppCheckToken(result.token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n    // Used for .info.\n    repo.infoData_ = new SnapshotHolder();\n    repo.infoSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            let infoEvents = [];\n            const node = repo.infoData_.getNode(query._path);\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n            // on initial data...\n            if (!node.isEmpty()) {\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n                setTimeout(() => {\n                    onComplete('ok');\n                }, 0);\n            }\n            return infoEvents;\n        },\n        stopListening: () => { }\n    });\n    repoUpdateInfo(repo, 'connected', false);\n    repo.serverSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n                const events = onComplete(status, data);\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n            });\n            // No synchronous events for network-backed sync trees\n            return [];\n        },\n        stopListening: (query, tag) => {\n            repo.server_.unlisten(query, tag);\n        }\n    });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    const offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n    return generateWithValues({\n        timestamp: repoServerTime(repo)\n    });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n    // For testing.\n    repo.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = repo.interceptServerDataCallback_\n        ? repo.interceptServerDataCallback_(pathString, data)\n        : data;\n    let events = [];\n    if (tag) {\n        if (isMerge) {\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n        }\n        else {\n            const taggedSnap = nodeFromJSON(data);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n        }\n    }\n    else if (isMerge) {\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n    }\n    else {\n        const snap = nodeFromJSON(data);\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n        // Since we have a listener outstanding for each transaction, receiving any events\n        // is a proxy for some change having occurred.\n        affectedPath = repoRerunTransactions(repo, path);\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n    repoUpdateInfo(repo, 'connected', connectStatus);\n    if (connectStatus === false) {\n        repoRunOnDisconnectEvents(repo);\n    }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n    each(updates, (key, value) => {\n        repoUpdateInfo(repo, key, value);\n    });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    repo.infoData_.updateSnapshot(path, newNode);\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n    return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n    if (cached != null) {\n        return Promise.resolve(cached);\n    }\n    return repo.server_.get(query).then(payload => {\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n        /**\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n         * Add an event registration,\n         * Update data at the path,\n         * Raise any events,\n         * Cleanup the SyncTree\n         */\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n        let events;\n        if (query._queryParams.loadsAllData()) {\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n        }\n        else {\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n        }\n        /*\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n         * ensure the corresponding child events will get fired.\n         */\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n        return node;\n    }, err => {\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err));\n    });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n    repoLog(repo, 'set', {\n        path: path.toString(),\n        value: newVal,\n        priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n            warn('set at ' + path + ' failed: ' + status);\n        }\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = repoGenerateServerValues(repo);\n    const changedChildren = {};\n    each(childrenToMerge, (changedKey, changedValue) => {\n        empty = false;\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n        const writeId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n        eventQueueQueueEvents(repo.eventQueue_, events);\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n            const success = status === 'ok';\n            if (!success) {\n                warn('update at ' + path + ' failed: ' + status);\n            }\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n        });\n        each(childrenToMerge, (changedPath) => {\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n            repoRerunTransactions(repo, affectedPath);\n        });\n        // We queued the events above, so just flush the queue here\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n    }\n    else {\n        log(\"update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n    repoLog(repo, 'onDisconnectEvents');\n    const serverValues = repoGenerateServerValues(repo);\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    });\n    let events = [];\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n        const affectedPath = repoAbortTransactions(repo, path);\n        repoRerunTransactions(repo, affectedPath);\n    });\n    repo.onDisconnect_ = newSparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n    const newNode = nodeFromJSON(value);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n    const newNode = nodeFromJSON(value, priority);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n    if (isEmpty(childrenToMerge)) {\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n        return;\n    }\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n        if (status === 'ok') {\n            each(childrenToMerge, (childName, childNode) => {\n                const newChildNode = nodeFromJSON(childNode);\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n            });\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n}\nfunction repoResume(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n}\nfunction repoLog(repo, ...varArgs) {\n    let prefix = '';\n    if (repo.persistentConnection_) {\n        prefix = repo.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n    if (callback) {\n        exceptionGuard(() => {\n            if (status === 'ok') {\n                callback(null);\n            }\n            else {\n                const code = (status || 'error').toUpperCase();\n                let message = code;\n                if (errorReason) {\n                    message += ': ' + errorReason;\n                }\n                const error = new Error(message);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.code = code;\n                callback(error);\n            }\n        });\n    }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n    repoLog(repo, 'transaction on ' + path);\n    // Initialize transaction.\n    const transaction = {\n        path,\n        update: transactionUpdate,\n        onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out\n        // which one goes first.\n        order: LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    const currentState = repoGetLatestState(repo, path, undefined);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\n        }\n    }\n    else {\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = 0 /* TransactionStatus.RUN */;\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n        const nodeQueue = treeGetValue(queueNode) || [];\n        nodeQueue.push(transaction);\n        treeSetValue(queueNode, nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our\n        // transaction state, since the user could start new transactions from the\n        // event callbacks.\n        let priorityForNode;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            contains(newVal, '.priority')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            priorityForNode = safeGet(newVal, '.priority');\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n                ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        const serverValues = repoGenerateServerValues(repo);\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n    }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n        ChildrenNode.EMPTY_NODE);\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        repoPruneCompletedTransactionsBelowNode(repo, node);\n    }\n    if (treeGetValue(node)) {\n        const queue = repoBuildTransactionQueue(repo, node);\n        assert(queue.length > 0, 'Sending zero length transaction queue');\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\n        }\n    }\n    else if (treeHasChildren(node)) {\n        treeForEachChild(node, childNode => {\n            repoSendReadyTransactions(repo, childNode);\n        });\n    }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n        return txn.currentWriteId;\n    });\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n        const txn = queue[i];\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = 1 /* TransactionStatus.SENT */;\n        txn.retryCount++;\n        const relativePath = newRelativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n    // Send the put.\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\n        repoLog(repo, 'transaction put response', {\n            path: pathToSend.toString(),\n            status\n        });\n        let events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our\n            // transaction state, since the callback could trigger more\n            // transactions or sets.\n            const callbacks = [];\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this\n                    // transaction is complete, it should be set\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n            // There may be pending transactions that we can now send.\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n            // Finally, trigger onComplete callbacks.\n            for (let i = 0; i < callbacks.length; i++) {\n                exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (let i = 0; i < queue.length; i++) {\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    }\n                    else {\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\n                    }\n                }\n            }\n            else {\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (let i = 0; i < queue.length; i++) {\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    queue[i].abortReason = status;\n                }\n            }\n            repoRerunTransactions(repo, path);\n        }\n    }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n    const path = treeGetPath(rootMostTransactionNode);\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n    repoRerunTransactionQueue(repo, queue, path);\n    return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n        return q.status === 0 /* TransactionStatus.RUN */;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n        return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n        const transaction = queue[i];\n        const relativePath = newRelativePath(path, transaction.path);\n        let abortTransaction = false, abortReason;\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                const newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    let newDataNode = nodeFromJSON(newData);\n                    const hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    const oldWriteId = transaction.currentWriteId;\n                    const serverValues = repoGenerateServerValues(repo);\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n                }\n            }\n        }\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n            // Removing a listener can trigger pruning which can muck with\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\n            // until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n                }\n                else {\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n    let front;\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = repo.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\n        transactionNode = treeSubTree(transactionNode, front);\n        path = pathPopFront(path);\n        front = pathGetFront(path);\n    }\n    return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue = [];\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => a.order - b.order);\n    return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n    const nodeQueue = treeGetValue(node);\n    if (nodeQueue) {\n        for (let i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    treeForEachChild(node, child => {\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\n    });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        let to = 0;\n        for (let from = 0; from < queue.length; from++) {\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\n    }\n    treeForEachChild(node, childNode => {\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\n    });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n    treeForEachAncestor(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    repoAbortTransactionsOnNode(repo, transactionNode);\n    treeForEachDescendant(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more transactions\n        // or sets.\n        const callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for\n        // abort, while the unsent ones can be immediately aborted and removed.\n        let events = [];\n        let lastSent = -1;\n        for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            treeSetValue(node, undefined);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n        for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n    let pathStringDecoded = '';\n    const pieces = pathString.split('/');\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            let piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n    const results = {};\n    if (queryString.charAt(0) === '?') {\n        queryString = queryString.substring(1);\n    }\n    for (const segment of queryString.split('&')) {\n        if (segment.length === 0) {\n            continue;\n        }\n        const kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n        }\n    }\n    return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\n    if (parsedUrl.domain === 'firebase.com') {\n        fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace === 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        warnIfPageIsSecure();\n    }\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \n        /*persistenceKey=*/ '', \n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\n        path: new Path(parsedUrl.pathString)\n    };\n};\nconst parseDatabaseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\n    // Always default to SSL, unless otherwise specified.\n    let secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        let colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        let slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        let questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = host.length;\n        }\n        const hostWithoutPort = host.slice(0, colonInd);\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        else if (hostWithoutPort.split('.').length <= 2) {\n            domain = hostWithoutPort;\n        }\n        else {\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\n            const dotInd = host.indexOf('.');\n            subdomain = host.substring(0, dotInd).toLowerCase();\n            domain = host.substring(dotInd + 1);\n            // Normalize namespaces to lowercase to share storage / connection.\n            namespace = subdomain;\n        }\n        // Always treat the value of the `ns` as the namespace name if it is present.\n        if ('ns' in queryParams) {\n            namespace = queryParams['ns'];\n        }\n    }\n    return {\n        host,\n        port,\n        domain,\n        subdomain,\n        secure,\n        scheme,\n        pathString,\n        namespace\n    };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = (function () {\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    let lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    const lastRandChars = [];\n    return function (now) {\n        const duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        let i;\n        const timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        assert(now === 0, 'Cannot push at time == 0');\n        let id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n    /**\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n     * @param eventRegistration - The function to call to with the event data. User provided\n     * @param snapshot - The data backing the event\n     * @param prevName - Optional, the name of the previous child for child_* events.\n     */\n    constructor(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    getPath() {\n        const ref = this.snapshot.ref;\n        if (this.eventType === 'value') {\n            return ref._path;\n        }\n        else {\n            return ref.parent._path;\n        }\n    }\n    getEventType() {\n        return this.eventType;\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            stringify(this.snapshot.exportVal()));\n    }\n}\nclass CancelEvent {\n    constructor(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    getPath() {\n        return this.path;\n    }\n    getEventType() {\n        return 'cancel';\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return this.path.toString() + ':cancel';\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n    constructor(snapshotCallback, cancelCallback) {\n        this.snapshotCallback = snapshotCallback;\n        this.cancelCallback = cancelCallback;\n    }\n    onValue(expDataSnapshot, previousChildName) {\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n    onCancel(error) {\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n        return this.cancelCallback.call(null, error);\n    }\n    get hasCancelCallback() {\n        return !!this.cancelCallback;\n    }\n    matches(other) {\n        return (this.snapshotCallback === other.snapshotCallback ||\n            (this.snapshotCallback.userCallback !== undefined &&\n                this.snapshotCallback.userCallback ===\n                    other.snapshotCallback.userCallback &&\n                this.snapshotCallback.context === other.snapshotCallback.context));\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n    /** @hideconstructor */\n    constructor(_repo, _path) {\n        this._repo = _repo;\n        this._path = _path;\n    }\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    cancel() {\n        const deferred = new Deferred();\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    remove() {\n        validateWritablePath('OnDisconnect.remove', this._path);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n     * for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    set(value) {\n        validateWritablePath('OnDisconnect.set', this._path);\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @param priority - The priority to be written (string, number, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    setWithPriority(value, priority) {\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * @param values - Object containing multiple values.\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    update(values) {\n        validateWritablePath('OnDisconnect.update', this._path);\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n    /**\n     * @hideconstructor\n     */\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\n        this._repo = _repo;\n        this._path = _path;\n        this._queryParams = _queryParams;\n        this._orderByCalled = _orderByCalled;\n    }\n    get key() {\n        if (pathIsEmpty(this._path)) {\n            return null;\n        }\n        else {\n            return pathGetBack(this._path);\n        }\n    }\n    get ref() {\n        return new ReferenceImpl(this._repo, this._path);\n    }\n    get _queryIdentifier() {\n        const obj = queryParamsGetQueryObject(this._queryParams);\n        const id = ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    }\n    /**\n     * An object representation of the query parameters used by this Query.\n     */\n    get _queryObject() {\n        return queryParamsGetQueryObject(this._queryParams);\n    }\n    isEqual(other) {\n        other = getModularInstance(other);\n        if (!(other instanceof QueryImpl)) {\n            return false;\n        }\n        const sameRepo = this._repo === other._repo;\n        const samePath = pathEquals(this._path, other._path);\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n        return sameRepo && samePath && sameQueryIdentifier;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n    if (query._orderByCalled === true) {\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n        startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n        endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n            'startAt(), endAt(), or equalTo().';\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n            'endAt(), endBefore(), or equalTo() must be a string.';\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            if (startName !== MIN_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof startNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            if (endName !== MAX_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof endNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n    }\n    else if (params.getIndex() === PRIORITY_INDEX) {\n        if ((startNode != null && !isValidPriority(startNode)) ||\n            (endNode != null && !isValidPriority(endNode))) {\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n                '(null, a number, or a string).');\n        }\n    }\n    else {\n        assert(params.getIndex() instanceof PathIndex ||\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\n        if ((startNode != null && typeof startNode === 'object') ||\n            (endNode != null && typeof endNode === 'object')) {\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n                'equalTo() cannot be an object.');\n        }\n    }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n    if (params.hasStart() &&\n        params.hasEnd() &&\n        params.hasLimit() &&\n        !params.hasAnchoredLimit()) {\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n            'limitToFirst() or limitToLast() instead.');\n    }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n    /** @hideconstructor */\n    constructor(repo, path) {\n        super(repo, path, new QueryParams(), false);\n    }\n    get parent() {\n        const parentPath = pathParent(this._path);\n        return parentPath === null\n            ? null\n            : new ReferenceImpl(this._repo, parentPath);\n    }\n    get root() {\n        let ref = this;\n        while (ref.parent !== null) {\n            ref = ref.parent;\n        }\n        return ref;\n    }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n    /**\n     * @param _node - A SnapshotNode to wrap.\n     * @param ref - The location this snapshot came from.\n     * @param _index - The iteration order for this snapshot\n     * @hideconstructor\n     */\n    constructor(_node, \n    /**\n     * The location of this DataSnapshot.\n     */\n    ref, _index) {\n        this._node = _node;\n        this.ref = ref;\n        this._index = _index;\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n     * ).\n     */\n    get priority() {\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this._node.getPriority().val();\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return\n     * `null`.\n     */\n    get key() {\n        return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get size() {\n        return this._node.numChildren();\n    }\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @param path - A relative path to the location of child data.\n     */\n    child(path) {\n        const childPath = new Path(path);\n        const childRef = child(this.ref, path);\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     */\n    exists() {\n        return !this._node.isEmpty();\n    }\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    exportVal() {\n        return this._node.val(true);\n    }\n    /**\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\n     * where `forEach()` comes in handy. It guarantees the children of a\n     * `DataSnapshot` will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action - A function that will be called for each child DataSnapshot.\n     * The callback can return true to cancel further enumeration.\n     * @returns true if enumeration was canceled due to your callback returning\n     * true.\n     */\n    forEach(action) {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        const childrenNode = this._node;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n        });\n    }\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @param path - A relative path to the location of a potential child.\n     * @returns `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path) {\n        const childPath = new Path(path);\n        return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @returns true if this snapshot has any children; else false.\n     */\n    hasChildren() {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        else {\n            return !this._node.isEmpty();\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.exportVal();\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    val() {\n        return this._node.val();\n    }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('ref');\n    return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('refFromURL');\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n    validateUrl('refFromURL', parsedURL);\n    const repoInfo = parsedURL.repoInfo;\n    if (!db._repo.repoInfo_.isCustomHost() &&\n        repoInfo.host !== db._repo.repoInfo_.host) {\n        fatal('refFromURL' +\n            ': Host name does not match the current database: ' +\n            '(found ' +\n            repoInfo.host +\n            ' but expected ' +\n            db._repo.repoInfo_.host +\n            ')');\n    }\n    return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n    parent = getModularInstance(parent);\n    if (pathGetFront(parent._path) === null) {\n        validateRootPathString('child', 'path', path, false);\n    }\n    else {\n        validatePathString('child', 'path', path, false);\n    }\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n    ref = getModularInstance(ref);\n    return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n    parent = getModularInstance(parent);\n    validateWritablePath('push', parent._path);\n    validateFirebaseDataArg('push', value, parent._path, true);\n    const now = repoServerTime(parent._repo);\n    const name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a\n    // regular Reference. We use child() to create handles to two different\n    // references. The first is turned into a ThennableReference below by adding\n    // then() and catch() methods and is used as the return value of push(). The\n    // second remains a regular Reference and is used as the fulfilled value of\n    // the first ThennableReference.\n    const thenablePushRef = child(parent, name);\n    const pushRef = child(parent, name);\n    let promise;\n    if (value != null) {\n        promise = set(pushRef, value).then(() => pushRef);\n    }\n    else {\n        promise = Promise.resolve(pushRef);\n    }\n    thenablePushRef.then = promise.then.bind(promise);\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\n    return thenablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n    validateWritablePath('remove', ref._path);\n    return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n    ref = getModularInstance(ref);\n    validateWritablePath('set', ref._path);\n    validateFirebaseDataArg('set', value, ref._path, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, \n    /*priority=*/ null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n    ref = getModularInstance(ref);\n    validateWritablePath('setPriority', ref._path);\n    validatePriority('setPriority', priority, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n    validateWritablePath('setWithPriority', ref._path);\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n    validatePriority('setWithPriority', priority, false);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n    }\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\n    const deferred = new Deferred();\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n    query = getModularInstance(query);\n    const callbackContext = new CallbackContext(() => { });\n    const container = new ValueEventRegistration(callbackContext);\n    return repoGetValue(query._repo, query, container).then(node => {\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n    });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n    constructor(callbackContext) {\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        return eventType === 'value';\n    }\n    createEvent(change, query) {\n        const index = query._queryParams.getIndex();\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\n        }\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    matches(other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callbackContext || !this.callbackContext) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return other.callbackContext.matches(this.callbackContext);\n        }\n    }\n    hasAnyCallback() {\n        return this.callbackContext !== null;\n    }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n    constructor(eventType, callbackContext) {\n        this.eventType = eventType;\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return this.eventType === eventToCheck;\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    createEvent(change, query) {\n        assert(change.childName != null, 'Child events should have a childName.');\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n        const index = query._queryParams.getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        }\n    }\n    matches(other) {\n        if (other instanceof ChildEventRegistration) {\n            return (this.eventType === other.eventType &&\n                (!this.callbackContext ||\n                    !other.callbackContext ||\n                    this.callbackContext.matches(other.callbackContext)));\n        }\n        return false;\n    }\n    hasAnyCallback() {\n        return !!this.callbackContext;\n    }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n    let cancelCallback;\n    if (typeof cancelCallbackOrListenOptions === 'object') {\n        cancelCallback = undefined;\n        options = cancelCallbackOrListenOptions;\n    }\n    if (typeof cancelCallbackOrListenOptions === 'function') {\n        cancelCallback = cancelCallbackOrListenOptions;\n    }\n    if (options && options.onlyOnce) {\n        const userCallback = callback;\n        const onceCallback = (dataSnapshot, previousChildName) => {\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\n            userCallback(dataSnapshot, previousChildName);\n        };\n        onceCallback.userCallback = callback.userCallback;\n        onceCallback.context = callback.context;\n        callback = onceCallback;\n    }\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n    const container = eventType === 'value'\n        ? new ValueEventRegistration(callbackContext)\n        : new ChildEventRegistration(eventType, callbackContext);\n    repoAddEventCallbackForQuery(query._repo, query, container);\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n    let container = null;\n    const expCallback = callback ? new CallbackContext(callback) : null;\n    if (eventType === 'value') {\n        container = new ValueEventRegistration(expCallback);\n    }\n    else if (eventType) {\n        container = new ChildEventRegistration(eventType, expCallback);\n    }\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {\n}\nclass QueryEndAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n    validateKey('endAt', 'key', key, true);\n    return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endBefore';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n    validateKey('endBefore', 'key', key, true);\n    return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\n                'startBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n    validateKey('startAt', 'key', key, true);\n    return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAfter';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\n                'startAfter, or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n    validateKey('startAfter', 'key', key, true);\n    return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToFirst';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToFirst: First argument must be a positive integer.');\n    }\n    return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToLast';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToLast: First argument must be a positive integer.');\n    }\n    return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n    constructor(_path) {\n        super();\n        this._path = _path;\n        this.type = 'orderByChild';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByChild');\n        const parsedPath = new Path(this._path);\n        if (pathIsEmpty(parsedPath)) {\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n        }\n        const index = new PathIndex(parsedPath);\n        const newParams = queryParamsOrderBy(query._queryParams, index);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n    if (path === '$key') {\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n    }\n    else if (path === '$priority') {\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n    }\n    else if (path === '$value') {\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n    }\n    validatePathString('orderByChild', 'path', path, false);\n    return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByKey';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByKey');\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n    return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByPriority';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n    return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByValue';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByValue');\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n    return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'equalTo';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\n        if (query._queryParams.hasStart()) {\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n                'equalTo).');\n        }\n        if (query._queryParams.hasEnd()) {\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n                'equalTo).');\n        }\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n    validateKey('equalTo', 'key', key, true);\n    return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n    let queryImpl = getModularInstance(query);\n    for (const constraint of queryConstraints) {\n        queryImpl = constraint._apply(queryImpl);\n    }\n    return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, hostAndPort, emulatorOptions, tokenProvider) {\n    const portIndex = hostAndPort.lastIndexOf(':');\n    const host = hostAndPort.substring(0, portIndex);\n    const useSsl = isCloudWorkstation(host);\n    repo.repoInfo_ = new RepoInfo(hostAndPort, \n    /* secure= */ useSsl, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \n    /*isUsingEmulator=*/ true, emulatorOptions);\n    if (tokenProvider) {\n        repo.authTokenProvider_ = tokenProvider;\n    }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n    let dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n        if (!app.options.projectId) {\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\n                ' a Project ID when calling firebase.initializeApp().');\n        }\n        log('Using default host for project ', app.options.projectId);\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n    let isEmulator;\n    let dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined' && process.env) {\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n        isEmulator = true;\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n        repoInfo = parsedUrl.repoInfo;\n    }\n    else {\n        isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    const authTokenProvider = nodeAdmin && isEmulator\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n        fatal('Database URL must point to the root of a Firebase Database ' +\n            '(not including a child path).');\n    }\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app, appCheckProvider));\n    return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n    const appRepos = repos[appName];\n    // This should never happen...\n    if (!appRepos || appRepos[repo.key] !== repo) {\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n    }\n    repoInterrupt(repo);\n    delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n    let appRepos = repos[app.name];\n    if (!appRepos) {\n        appRepos = {};\n        repos[app.name] = appRepos;\n    }\n    let repo = appRepos[repoInfo.toURLString()];\n    if (repo) {\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n    useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n    /** @hideconstructor */\n    constructor(_repoInternal, \n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    app) {\n        this._repoInternal = _repoInternal;\n        this.app = app;\n        /** Represents a `Database` instance. */\n        this['type'] = 'database';\n        /** Track if the instance has been used (root or repo accessed) */\n        this._instanceStarted = false;\n    }\n    get _repo() {\n        if (!this._instanceStarted) {\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n            this._instanceStarted = true;\n            updateEmulatorBanner('Database', this._repo.repoInfo_.emulatorOptions !== null);\n        }\n        return this._repoInternal;\n    }\n    get _root() {\n        if (!this._rootInternal) {\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n        }\n        return this._rootInternal;\n    }\n    _delete() {\n        if (this._rootInternal !== null) {\n            repoManagerDeleteRepo(this._repo, this.app.name);\n            this._repoInternal = null;\n            this._rootInternal = null;\n        }\n        return Promise.resolve();\n    }\n    _checkNotDeleted(apiName) {\n        if (this._rootInternal === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    }\n}\nfunction checkTransportInit() {\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n    }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n    checkTransportInit();\n    BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n    checkTransportInit();\n    WebSocketConnection.forceDisallow();\n    BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = getApp(), url) {\n    const db = _getProvider(app, 'database').getImmediate({\n        identifier: url\n    });\n    if (!db._instanceStarted) {\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\n        if (emulator) {\n            connectDatabaseEmulator(db, ...emulator);\n        }\n    }\n    return db;\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('useEmulator');\n    const hostAndPort = `${host}:${port}`;\n    const repo = db._repoInternal;\n    if (db._instanceStarted) {\n        // If the instance has already been started, then silenty fail if this function is called again\n        // with the same parameters. If the parameters differ then assert.\n        if (hostAndPort === db._repoInternal.repoInfo_.host &&\n            deepEqual(options, repo.repoInfo_.emulatorOptions)) {\n            return;\n        }\n        fatal('connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.');\n    }\n    let tokenProvider = undefined;\n    if (repo.repoInfo_.nodeAdmin) {\n        if (options.mockUserToken) {\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n        }\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n    }\n    else if (options.mockUserToken) {\n        const token = typeof options.mockUserToken === 'string'\n            ? options.mockUserToken\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n        tokenProvider = new EmulatorTokenProvider(token);\n    }\n    // Workaround to get cookies in Firebase Studio\n    if (isCloudWorkstation(host)) {\n        void pingServer(host);\n        updateEmulatorBanner('Database', true);\n    }\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(repo, hostAndPort, options, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOffline');\n    repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOnline');\n    repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n    enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n    setSDKVersion(SDK_VERSION$1);\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n    '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n    return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n    return {\n        '.sv': {\n            'increment': delta\n        }\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n    /** @hideconstructor */\n    constructor(\n    /** Whether the transaction was successfully committed. */\n    committed, \n    /** The resulting data snapshot. */\n    snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    /** Returns a JSON-serializable representation of this object. */\n    toJSON() {\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n    var _a;\n    ref = getModularInstance(ref);\n    validateWritablePath('Reference.transaction', ref._path);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\n    }\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n    const deferred = new Deferred();\n    const promiseComplete = (error, committed, node) => {\n        let dataSnapshot = null;\n        if (error) {\n            deferred.reject(error);\n        }\n        else {\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\n        }\n    };\n    // Add a watch to make sure we get server updates.\n    const unwatcher = onValue(ref, () => { });\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n    return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n    const oldPut = PersistentConnection.prototype.put;\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        if (hash !== undefined) {\n            hash = newHash();\n        }\n        oldPut.call(this, pathString, data, onComplete, hash);\n    };\n    return function () {\n        PersistentConnection.prototype.put = oldPut;\n    };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n    repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\n    setSDKVersion(version);\n    /**\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n     * any actual function.\n     */\n    const componentContainer = new ComponentContainer('database-standalone');\n    const authProvider = new Provider('auth-internal', componentContainer);\n    let appCheckProvider;\n    if (customAppCheckImpl) {\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    }\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["name","version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","this","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","bias","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","app","appCheckProvider","appName","settings","appCheckToken","serverAppAppCheckToken","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","token","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","appName_","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","emulatorOptions","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","getInstance","super","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","outstandingGet","request","p","_path","q","_queryObject","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","Default","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listens_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","fromObject","childPath","EmptyChildren","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","fnName","argumentName","validateRootPathString","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","changeTree","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","lastPushTime","lastRandChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","encodeURIComponent","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","callbackContext","container","ValueEventRegistration","cached","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","repoManagerDeleteRepo","apiName","getDatabase","identifier","emulator","hostAndPort","tokenProvider","mockUserToken","portIndex","lastIndexOf","useSsl","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","prototype","simpleListen","echo","onEcho","variant","instanceIdentifier","getProvider","setMultipleInstances"],"sourceRoot":""}