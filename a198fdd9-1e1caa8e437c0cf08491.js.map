{"version":3,"file":"a198fdd9-1e1caa8e437c0cf08491.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a JavaScript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in keys, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are received from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whether the tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thenablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thenablePushRef.then = promise.then.bind(promise);\r\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thenablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endBefore';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAfter';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToFirst';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToLast';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n        this.type = 'orderByChild';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByKey';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByPriority';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByValue';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'equalTo';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated with the provided\r\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\r\n * no instance exists or if the existing instance uses a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n * @internal\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAppCheckImpl - custom app check implementation\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\r\n    setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const componentContainer = new ComponentContainer('database-standalone');\r\n    const authProvider = new Provider('auth-internal', componentContainer);\r\n    let appCheckProvider;\r\n    if (customAppCheckImpl) {\r\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\r\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    }\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\r\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["name","version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","this","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","bias","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","super","online_","getInstance","currentlyOnline","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","outstandingGet","request","p","_path","q","_queryObject","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","fnName","argumentName","validateRootPathString","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","changeTree","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","lastPushTime","lastRandChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","encodeURIComponent","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","callbackContext","container","ValueEventRegistration","cached","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","appName","repoManagerDeleteRepo","apiName","getDatabase","identifier","emulator","tokenProvider","mockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","prototype","simpleListen","echo","onEcho","variant","instanceIdentifier","getProvider","setMultipleInstances"],"sourceRoot":""}